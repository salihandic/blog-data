{"title":"Linux Sunuculara Güvenli Erişim: SSH Anahtarları ile Kimlik Doğrulama","caption":"","media":[],"id":1750409131719,"translates":[{"code":"tr","title":"Linux Sunuculara Güvenli Erişim: SSH Anahtarları ile Kimlik Doğrulama","description":"Linux sunuculara parola yerine SSH anahtarları ile nasıl güvenli bir şekilde erişim sağlayacağınızı adım adım öğrenin. SSH anahtarı oluşturma, sunucuya kopyalama ve daha fazlası.","excerpt":"Bu makalede, Linux sunucularınıza parolalar yerine SSH anahtarları kullanarak nasıl daha güvenli bir şekilde bağlanabileceğinizi adım adım açıklıyoruz. SSH anahtarlarının ne olduğunu, nasıl oluşturulduğunu ve sunucuya nasıl kurulduğunu öğrenin.","keywords":["SSH anahtarı","Linux sunucu güvenliği","SSH kimlik doğrulama","ssh-keygen","authorized_keys","PuTTYgen","güvenli erişim","sunucu yönetimi"],"cities":[],"content":"## **Giriş: SSH Anahtarlarını Anlamak ve Kullanmak**\n\nSSH anahtarları, bir Linux sunucusuna paroladan çok daha güvenli bir şekilde giriş yapmanın bir yoludur. Parola tabanlı kimlik doğrulama yöntemlerine kıyasla **çok daha üstün bir güvenlik** sağlarlar. SSH anahtarları, ortak anahtar şifrelemesi kullanır. Bu, bir çift anahtar oluşturmayı içerir: paylaşılabilen bir ortak anahtar ve gizli tutulması gereken bir özel anahtar. Parola kullanmak yerine, bu anahtarlar kimliğinizi doğrular, böylece sunucunuzun güvenliğini önemli ölçüde artırır.\n\n**SSH anahtarları** ile sunuculara erişim, parolaların kırılması veya çalınması riskini ortadan kaldırır. Bu yöntem, özellikle birden fazla sunucuyu yöneten veya hassas verilere erişen kullanıcılar için önemlidir. SSH anahtarlarını doğru şekilde yapılandırarak, sunucunuzun yetkisiz erişime karşı korunmasını sağlayabilirsiniz.\n\n## **Adım 1: Bir Anahtar Çifti Oluşturun**\n\nÖncelikle, yerel bilgisayarınızda bir SSH anahtar çifti oluşturmanız gerekir. Bu, Linux, macOS ve Windows'ta bulunan `ssh-keygen` gibi bir araç kullanılarak yapılır. Windows kullanıcıları ayrıca PuTTYgen veya WSL gibi araçları da kullanabilirler.\n\n### **Linux veya macOS'ta ssh-keygen Kullanımı**\n\nBir terminal açın ve `ssh-keygen` komutunu çalıştırın. Araç, anahtarı kaydetmek için bir konum belirtmenizi isteyecektir. Varsayılan konum, özel anahtar için `/home/kullanici/.ssh/id_rsa` ve ortak anahtar için `/home/kullanici/.ssh/id_rsa.pub` şeklindedir. Anahtarınız için ek güvenlik için bir parola da ayarlayabilirsiniz. Bu, özel anahtarınızın yetkisiz kullanımını önlemeye yardımcı olur.\n\n```bash\nssh-keygen\n```\n\nKomutu çalıştırdıktan sonra, terminal aşağıdaki gibi bir çıktı gösterecektir:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/kullanici/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/kullanici/.ssh/id_rsa.\nYour public key has been saved in /home/kullanici/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: rastgele_karakterler kullanici@bilgisayaradi\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nParola belirlemek **önemlidir**, çünkü bu, özel anahtarınızın güvenliğini artırır. Parola, anahtarınızın yetkisiz kullanımını önler ve sunucularınıza yetkisiz erişimi engeller.\n\n### **Windows'ta PuTTYgen Kullanımı**\n\nPuTTYgen'i indirin ve açın. **Generate** (Oluştur) düğmesine tıklayın ve rastgelelik oluşturmak için farenizi hareket ettirin. PuTTYgen, bir ortak ve özel anahtar oluşturacaktır. Ortak anahtarı (daha sonra kullanmak için) ve özel anahtarı (.ppk dosyası olarak) kaydedin. PuTTYgen, Windows kullanıcıları için SSH anahtarı oluşturmanın kolay bir yolunu sunar. Anahtarları oluşturduktan sonra, bunları güvenli bir yerde saklamayı unutmayın.\n\nPuTTYgen ekranında, anahtar oluşturulduktan sonra ortak anahtarı göreceksiniz. Bu anahtarı kopyalayın ve bir metin dosyasına kaydedin. Daha sonra sunucunuza yüklemek için bu anahtara ihtiyacınız olacak. Özel anahtarı da .ppk dosyası olarak kaydedin. Bu dosya, PuTTY ile sunucunuza bağlanmak için kullanılacaktır.\n\n## **Adım 2: Ortak Anahtarı Sunucuya Kopyalayın**\n\nSSH anahtarını kimlik doğrulama için kullanmak üzere, ortak anahtarın sunucunun `~/.ssh/authorized_keys` dosyasına kopyalanması gerekir. Bu, `ssh-copy-id` komutu kullanılarak veya anahtarın manuel olarak kopyalanmasıyla yapılabilir.\n\n### **ssh-copy-id Kullanımı**\n\nYerel bilgisayarınızda `ssh-copy-id` komutu varsa, ortak anahtarı sunucuya kopyalamak için kullanabilirsiniz. Temel sözdizimi `ssh-copy-id kullanici@sunucu_ip` şeklindedir. Sunucudaki kullanıcının parolasını isteyecektir. Bu komut, ortak anahtarı sunucuya güvenli bir şekilde kopyalamanın en kolay yoludur.\n\n```bash\nssh-copy-id kullanici@sunucu_ip\n```\n\nBu komut, ortak anahtarınızı sunucunun `authorized_keys` dosyasına otomatik olarak ekleyecektir. Komutu çalıştırdıktan sonra, sunucuya SSH anahtarıyla giriş yapmayı deneyebilirsiniz.\n\n### **Ortak Anahtarı Manuel Olarak Kopyalama**\n\n`ssh-copy-id` kullanılamıyorsa, ortak anahtar dosyasının (`~/.ssh/id_rsa.pub`) içeriğini sunucudaki `~/.ssh/authorized_keys` dosyasına manuel olarak kopyalayabilirsiniz. İlk olarak, bir parola kullanarak sunucuya giriş yapın. Ardından, `mkdir -p ~/.ssh` kullanarak `.ssh` dizinini yoksa oluşturun. Ardından, `nano ~/.ssh/authorized_keys` gibi bir metin düzenleyici kullanarak `authorized_keys` dosyasını açın veya oluşturun ve ortak anahtarı dosyaya yapıştırın. Dosyayı kaydedin ve kapatın. Bu işlem, ortak anahtarınızı sunucuya manuel olarak eklemenizi sağlar.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nMetin düzenleyici açıldığında, ortak anahtarınızın içeriğini yapıştırın. Dosyayı kaydedin ve kapatın. Sunucuda SSH anahtarıyla oturum açmaya hazırsınız.\n\n## **Adım 3: SSH Anahtarını Kullanarak Sunucuya Giriş Yapın**\n\nOrtak anahtar ayarlandıktan sonra, SSH anahtarını kullanarak sunucuya giriş yapabilirsiniz. Linux veya macOS'ta bu, `ssh kullanici@sunucu_ip` komutu kullanılarak yapılır. Bir parola ayarladıysanız, girmeniz istenecektir. Windows'ta, PuTTY'yi kullanın, sunucu IP adresini belirtin ve Bağlantı > SSH > Auth altında özel anahtar dosyasını (.ppk) yükleyin. Bu adım, SSH anahtarlarının doğru şekilde yapılandırıldığını ve sunucunuza güvenli bir şekilde erişebileceğinizi doğrular.\n\nLinux veya macOS'ta komut şu şekildedir:\n\n```bash\nssh kullanici@sunucu_ip\n```\n\nWindows'ta PuTTY kullanıyorsanız, oturum açmadan önce özel anahtar dosyasını (.ppk) yüklemeyi unutmayın.\n\n## **Sonuç: SSH Anahtarları ile Gelişmiş Güvenlik**\n\nParolalar yerine SSH anahtarları kullanarak, sunucu erişiminin güvenliği önemli ölçüde iyileştirilir ve kimlik doğrulama için ortak anahtar şifrelemesinden yararlanılır. Bu, özellikle hassas verilere erişen veya birden fazla sunucuyu yöneten kullanıcılar için önemlidir. **SSH anahtarlarının** kullanımı, parola tabanlı saldırılara karşı etkili bir koruma sağlar ve sunucunuzun güvenliğini en üst düzeye çıkarır. **SSH anahtarları**, modern sunucu yönetiminin vazgeçilmez bir parçasıdır ve her sistem yöneticisi tarafından bilinmesi gereken bir güvenlik önlemidir.\n\n**Linux sunucularınızın güvenliğini artırmak için bugün SSH anahtarlarını kullanmaya başlayın!**"},{"code":"en","title":"Secure Access to Linux Servers: SSH Key Authentication","description":"Learn step-by-step how to securely access Linux servers with SSH keys instead of passwords. SSH key generation, server copying, and more.","excerpt":"In this article, we explain step-by-step how to securely connect to your Linux servers using SSH keys instead of passwords. Learn what SSH keys are, how to generate them, and how to install them on the server.","keywords":["SSH key","Linux server security","SSH authentication","ssh-keygen","authorized_keys","PuTTYgen","secure access","server management"],"cities":[],"content":"## **Introduction: Understanding and Using SSH Keys**\n\nSSH keys are a much more secure way to log in to a Linux server than a password. They provide **far superior security** compared to password-based authentication methods. SSH keys use public-key cryptography. This involves creating a pair of keys: a public key that can be shared and a private key that must be kept secret. Instead of using a password, these keys verify your identity, thus significantly increasing the security of your server.\n\nAccessing servers with **SSH keys** eliminates the risk of passwords being cracked or stolen. This method is particularly important for users who manage multiple servers or access sensitive data. By properly configuring SSH keys, you can ensure your server is protected against unauthorized access.\n\n## **Step 1: Generate a Key Pair**\n\nFirst, you need to generate an SSH key pair on your local computer. This is done using a tool like `ssh-keygen`, which is available on Linux, macOS, and Windows. Windows users can also use tools like PuTTYgen or WSL.\n\n### **Using ssh-keygen on Linux or macOS**\n\nOpen a terminal and run the `ssh-keygen` command. The tool will ask you to specify a location to save the key. The default location is `/home/username/.ssh/id_rsa` for the private key and `/home/username/.ssh/id_rsa.pub` for the public key. You can also set a passphrase for your key for added security. This helps prevent unauthorized use of your private key.\n\n```bash\nssh-keygen\n```\n\nAfter running the command, the terminal will display output like this:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/username/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/username/.ssh/id_rsa.\nYour public key has been saved in /home/username/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: random_characters username@computername\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nSetting a passphrase is **important** because it increases the security of your private key. The passphrase prevents unauthorized use of your key and blocks unauthorized access to your servers.\n\n### **Using PuTTYgen on Windows**\n\nDownload and open PuTTYgen. Click the **Generate** button and move your mouse to create randomness. PuTTYgen will generate a public and private key. Save the public key (for later use) and the private key (as a .ppk file). PuTTYgen offers an easy way for Windows users to generate SSH keys. After generating the keys, remember to store them in a safe place.\n\nOn the PuTTYgen screen, you will see the public key after it has been generated. Copy this key and save it to a text file. You will need this key to upload it to your server later. Also, save the private key as a .ppk file. This file will be used to connect to your server with PuTTY.\n\n## **Step 2: Copy the Public Key to the Server**\n\nTo use the SSH key for authentication, the public key needs to be copied to the server's `~/.ssh/authorized_keys` file. This can be done using the `ssh-copy-id` command or by manually copying the key.\n\n### **Using ssh-copy-id**\n\nIf you have the `ssh-copy-id` command on your local computer, you can use it to copy the public key to the server. The basic syntax is `ssh-copy-id user@server_ip`. It will ask for the password of the user on the server. This command is the easiest way to securely copy the public key to the server.\n\n```bash\nssh-copy-id user@server_ip\n```\n\nThis command will automatically add your public key to the server's `authorized_keys` file. After running the command, you can try logging into the server with the SSH key.\n\n### **Manually Copying the Public Key**\n\nIf `ssh-copy-id` is not available, you can manually copy the contents of the public key file (`~/.ssh/id_rsa.pub`) to the `~/.ssh/authorized_keys` file on the server. First, log in to the server using a password. Then, create the `.ssh` directory if it doesn't exist using `mkdir -p ~/.ssh`. Next, open or create the `authorized_keys` file using a text editor such as `nano ~/.ssh/authorized_keys` and paste the public key into the file. Save and close the file. This process allows you to manually add your public key to the server.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nWhen the text editor opens, paste the contents of your public key. Save the file and close it. You are now ready to log in to the server with the SSH key.\n\n## **Step 3: Log in to the Server Using the SSH Key**\n\nOnce the public key is set up, you can log in to the server using the SSH key. On Linux or macOS, this is done using the `ssh user@server_ip` command. If you set a passphrase, you will be prompted to enter it. On Windows, use PuTTY, specify the server IP address, and load the private key file (.ppk) under Connection > SSH > Auth. This step verifies that the SSH keys are configured correctly and that you can securely access your server.\n\nOn Linux or macOS, the command is as follows:\n\n```bash\nssh user@server_ip\n```\n\nIf you are using PuTTY on Windows, remember to load the private key file (.ppk) before logging in.\n\n## **Conclusion: Enhanced Security with SSH Keys**\n\nBy using SSH keys instead of passwords, the security of server access is significantly improved, and public-key cryptography is leveraged for authentication. This is especially important for users who access sensitive data or manage multiple servers. The use of **SSH keys** provides effective protection against password-based attacks and maximizes the security of your server. **SSH keys** are an indispensable part of modern server management and a security measure that every system administrator should know.\n\n**Start using SSH keys today to enhance the security of your Linux servers!**"},{"code":"es","title":"Acceso Seguro a Servidores Linux: Autenticación con Claves SSH","description":"Aprenda paso a paso cómo acceder de forma segura a servidores Linux con claves SSH en lugar de contraseñas. Creación de claves SSH, copia al servidor y más.","excerpt":"En este artículo, explicamos paso a paso cómo conectarse de forma más segura a sus servidores Linux utilizando claves SSH en lugar de contraseñas. Aprenda qué son las claves SSH, cómo se crean y cómo se instalan en el servidor.","keywords":["Clave SSH","Seguridad del servidor Linux","Autenticación SSH","ssh-keygen","authorized_keys","PuTTYgen","acceso seguro","administración del servidor"],"cities":[],"content":"## **Introducción: Entender y Usar las Claves SSH**\n\nLas claves SSH son una forma mucho más segura de iniciar sesión en un servidor Linux que una contraseña. Proporcionan una **seguridad muy superior** en comparación con los métodos de autenticación basados en contraseñas. Las claves SSH utilizan criptografía de clave pública. Esto implica la creación de un par de claves: una clave pública que se puede compartir y una clave privada que debe mantenerse en secreto. En lugar de usar una contraseña, estas claves verifican su identidad, lo que aumenta significativamente la seguridad de su servidor.\n\nEl acceso a los servidores con **claves SSH** elimina el riesgo de que las contraseñas se descifren o sean robadas. Este método es particularmente importante para los usuarios que administran múltiples servidores o acceden a datos confidenciales. Al configurar correctamente las claves SSH, puede asegurarse de que su servidor esté protegido contra el acceso no autorizado.\n\n## **Paso 1: Crear un Par de Claves**\n\nPrimero, debe crear un par de claves SSH en su computadora local. Esto se hace utilizando una herramienta como `ssh-keygen`, que está disponible en Linux, macOS y Windows. Los usuarios de Windows también pueden usar herramientas como PuTTYgen o WSL.\n\n### **Uso de ssh-keygen en Linux o macOS**\n\nAbre una terminal y ejecuta el comando `ssh-keygen`. La herramienta le pedirá que especifique una ubicación para guardar la clave. La ubicación predeterminada es `/home/usuario/.ssh/id_rsa` para la clave privada y `/home/usuario/.ssh/id_rsa.pub` para la clave pública. También puede establecer una frase de contraseña para su clave para mayor seguridad. Esto ayuda a prevenir el uso no autorizado de su clave privada.\n\n```bash\nssh-keygen\n```\n\nDespués de ejecutar el comando, la terminal mostrará una salida como esta:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/usuario/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/usuario/.ssh/id_rsa.\nYour public key has been saved in /home/usuario/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: caracteres_aleatorios usuario@nombredelacomputadora\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nEstablecer una frase de contraseña es **importante** porque aumenta la seguridad de su clave privada. La frase de contraseña evita el uso no autorizado de su clave y bloquea el acceso no autorizado a sus servidores.\n\n### **Uso de PuTTYgen en Windows**\n\nDescargue y abra PuTTYgen. Haga clic en el botón **Generate** (Generar) y mueva el ratón para crear aleatoriedad. PuTTYgen generará una clave pública y privada. Guarde la clave pública (para usarla más tarde) y la clave privada (como un archivo .ppk). PuTTYgen ofrece una manera fácil para que los usuarios de Windows generen claves SSH. Después de generar las claves, recuerde guardarlas en un lugar seguro.\n\nEn la pantalla de PuTTYgen, verá la clave pública después de que se haya generado. Copie esta clave y guárdela en un archivo de texto. Necesitará esta clave para cargarla en su servidor más tarde. También, guarde la clave privada como un archivo .ppk. Este archivo se utilizará para conectarse a su servidor con PuTTY.\n\n## **Paso 2: Copiar la Clave Pública al Servidor**\n\nPara utilizar la clave SSH para la autenticación, la clave pública debe copiarse en el archivo `~/.ssh/authorized_keys` del servidor. Esto se puede hacer utilizando el comando `ssh-copy-id` o copiando la clave manualmente.\n\n### **Uso de ssh-copy-id**\n\nSi tiene el comando `ssh-copy-id` en su computadora local, puede usarlo para copiar la clave pública al servidor. La sintaxis básica es `ssh-copy-id usuario@ip_del_servidor`. Le pedirá la contraseña del usuario en el servidor. Este comando es la forma más fácil de copiar de forma segura la clave pública al servidor.\n\n```bash\nssh-copy-id usuario@ip_del_servidor\n```\n\nEste comando agregará automáticamente su clave pública al archivo `authorized_keys` del servidor. Después de ejecutar el comando, puede intentar iniciar sesión en el servidor con la clave SSH.\n\n### **Copiando Manualmente la Clave Pública**\n\nSi `ssh-copy-id` no está disponible, puede copiar manualmente el contenido del archivo de clave pública (`~/.ssh/id_rsa.pub`) al archivo `~/.ssh/authorized_keys` en el servidor. Primero, inicie sesión en el servidor usando una contraseña. Luego, cree el directorio `.ssh` si no existe usando `mkdir -p ~/.ssh`. A continuación, abra o cree el archivo `authorized_keys` usando un editor de texto como `nano ~/.ssh/authorized_keys` y pegue la clave pública en el archivo. Guarde y cierre el archivo. Este proceso le permite agregar manualmente su clave pública al servidor.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nCuando se abra el editor de texto, pegue el contenido de su clave pública. Guarde el archivo y ciérrelo. Ahora está listo para iniciar sesión en el servidor con la clave SSH.\n\n## **Paso 3: Iniciar Sesión en el Servidor Usando la Clave SSH**\n\nUna vez que la clave pública esté configurada, puede iniciar sesión en el servidor utilizando la clave SSH. En Linux o macOS, esto se hace usando el comando `ssh usuario@ip_del_servidor`. Si configuró una frase de contraseña, se le pedirá que la ingrese. En Windows, use PuTTY, especifique la dirección IP del servidor y cargue el archivo de clave privada (.ppk) en Connection > SSH > Auth. Este paso verifica que las claves SSH estén configuradas correctamente y que pueda acceder de forma segura a su servidor.\n\nEn Linux o macOS, el comando es el siguiente:\n\n```bash\nssh usuario@ip_del_servidor\n```\n\nSi está utilizando PuTTY en Windows, recuerde cargar el archivo de clave privada (.ppk) antes de iniciar sesión.\n\n## **Conclusión: Seguridad Mejorada con Claves SSH**\n\nAl utilizar claves SSH en lugar de contraseñas, la seguridad del acceso al servidor se mejora significativamente, y se aprovecha la criptografía de clave pública para la autenticación. Esto es especialmente importante para los usuarios que acceden a datos confidenciales o administran múltiples servidores. El uso de **claves SSH** proporciona una protección eficaz contra los ataques basados en contraseñas y maximiza la seguridad de su servidor. Las **claves SSH** son una parte indispensable de la administración moderna de servidores y una medida de seguridad que todo administrador de sistemas debe conocer.\n\n**¡Comience a usar claves SSH hoy mismo para mejorar la seguridad de sus servidores Linux!**"},{"code":"ko","title":"Linux 서버에 안전하게 액세스하기: SSH 키를 사용한 인증","description":"비밀번호 대신 SSH 키로 Linux 서버에 안전하게 액세스하는 방법을 단계별로 알아보세요. SSH 키 생성, 서버 복사 등.","excerpt":"이 문서에서는 비밀번호 대신 SSH 키를 사용하여 Linux 서버에 더 안전하게 연결하는 방법을 단계별로 설명합니다. SSH 키가 무엇인지, 생성 방법, 서버에 설치하는 방법을 알아보세요.","keywords":["SSH 키","Linux 서버 보안","SSH 인증","ssh-keygen","authorized_keys","PuTTYgen","안전한 액세스","서버 관리"],"cities":[],"content":"## **소개: SSH 키 이해 및 사용**\n\nSSH 키는 비밀번호보다 훨씬 안전하게 Linux 서버에 로그인하는 방법입니다. 비밀번호 기반 인증 방법과 비교하여 **훨씬 뛰어난 보안**을 제공합니다. SSH 키는 공개 키 암호화를 사용합니다. 여기에는 공유할 수 있는 공개 키와 비밀로 유지해야 하는 개인 키인 키 쌍을 생성하는 것이 포함됩니다. 비밀번호를 사용하는 대신 이러한 키는 신원을 확인하여 서버 보안을 크게 향상시킵니다.\n\n**SSH 키**를 사용하여 서버에 액세스하면 비밀번호가 해킹되거나 도난당할 위험이 없습니다. 이 방법은 특히 여러 서버를 관리하거나 중요한 데이터에 액세스하는 사용자에게 중요합니다. SSH 키를 올바르게 구성하면 서버가 무단 액세스로부터 보호되도록 할 수 있습니다.\n\n## **1단계: 키 쌍 생성**\n\n먼저 로컬 컴퓨터에서 SSH 키 쌍을 생성해야 합니다. 이는 Linux, macOS 및 Windows에서 사용할 수 있는 `ssh-keygen`과 같은 도구를 사용하여 수행됩니다. Windows 사용자는 PuTTYgen 또는 WSL과 같은 도구를 사용할 수도 있습니다.\n\n### **Linux 또는 macOS에서 ssh-keygen 사용**\n\n터미널을 열고 `ssh-keygen` 명령을 실행합니다. 이 도구는 키를 저장할 위치를 지정하라는 메시지를 표시합니다. 기본 위치는 개인 키의 경우 `/home/사용자/.ssh/id_rsa`이고 공개 키의 경우 `/home/사용자/.ssh/id_rsa.pub`입니다. 키에 대한 추가 보안을 위해 암호를 설정할 수도 있습니다. 이렇게 하면 개인 키의 무단 사용을 방지하는 데 도움이 됩니다.\n\n```bash\nssh-keygen\n```\n\n명령을 실행한 후 터미널에 다음과 같은 출력이 표시됩니다.\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/사용자/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/사용자/.ssh/id_rsa.\nYour public key has been saved in /home/사용자/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: 임의_문자 사용자@컴퓨터이름\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\n암호 설정은 개인 키의 보안을 강화하므로 **중요합니다**. 암호는 키의 무단 사용을 방지하고 서버에 대한 무단 액세스를 차단합니다.\n\n### **Windows에서 PuTTYgen 사용**\n\nPuTTYgen을 다운로드하여 엽니다. **Generate**(생성) 버튼을 클릭하고 마우스를 움직여 임의성을 생성합니다. PuTTYgen은 공개 키와 개인 키를 생성합니다. 공개 키(나중에 사용)와 개인 키(.ppk 파일)를 저장합니다. PuTTYgen은 Windows 사용자가 SSH 키를 쉽게 생성할 수 있는 방법을 제공합니다. 키를 생성한 후에는 안전한 곳에 보관하는 것을 잊지 마십시오.\n\nPuTTYgen 화면에서 키가 생성된 후 공개 키가 표시됩니다. 이 키를 복사하여 텍스트 파일에 저장합니다. 나중에 서버에 업로드하려면 이 키가 필요합니다. 개인 키도 .ppk 파일로 저장합니다. 이 파일은 PuTTY를 사용하여 서버에 연결하는 데 사용됩니다.\n\n## **2단계: 공개 키를 서버에 복사**\n\nSSH 키를 인증에 사용하려면 공개 키를 서버의 `~/.ssh/authorized_keys` 파일에 복사해야 합니다. 이는 `ssh-copy-id` 명령을 사용하거나 키를 수동으로 복사하여 수행할 수 있습니다.\n\n### **ssh-copy-id 사용**\n\n로컬 컴퓨터에 `ssh-copy-id` 명령이 있는 경우 이를 사용하여 공개 키를 서버에 복사할 수 있습니다. 기본 구문은 `ssh-copy-id 사용자@서버_ip`입니다. 서버의 사용자 비밀번호를 묻습니다. 이 명령은 공개 키를 서버에 안전하게 복사하는 가장 쉬운 방법입니다.\n\n```bash\nssh-copy-id 사용자@서버_ip\n```\n\n이 명령은 공개 키를 서버의 `authorized_keys` 파일에 자동으로 추가합니다. 명령을 실행한 후 SSH 키로 서버에 로그인을 시도할 수 있습니다.\n\n### **공개 키를 수동으로 복사**\n\n`ssh-copy-id`를 사용할 수 없는 경우 공개 키 파일(`~/.ssh/id_rsa.pub`)의 내용을 서버의 `~/.ssh/authorized_keys` 파일에 수동으로 복사할 수 있습니다. 먼저 비밀번호를 사용하여 서버에 로그인합니다. 그런 다음 `mkdir -p ~/.ssh`를 사용하여 `.ssh` 디렉터리가 없으면 만듭니다. 다음으로 `nano ~/.ssh/authorized_keys`와 같은 텍스트 편집기를 사용하여 `authorized_keys` 파일을 열거나 만들고 공개 키를 파일에 붙여넣습니다. 파일을 저장하고 닫습니다. 이 프로세스를 통해 공개 키를 서버에 수동으로 추가할 수 있습니다.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\n텍스트 편집기가 열리면 공개 키의 내용을 붙여넣습니다. 파일을 저장하고 닫습니다. 이제 SSH 키로 서버에 로그인할 준비가 되었습니다.\n\n## **3단계: SSH 키를 사용하여 서버에 로그인**\n\n공개 키가 설정되면 SSH 키를 사용하여 서버에 로그인할 수 있습니다. Linux 또는 macOS에서는 `ssh 사용자@서버_ip` 명령을 사용하여 수행됩니다. 암호를 설정한 경우 입력하라는 메시지가 표시됩니다. Windows에서는 PuTTY를 사용하고 서버 IP 주소를 지정하고 Connection > SSH > Auth 아래에서 개인 키 파일(.ppk)을 로드합니다. 이 단계를 통해 SSH 키가 올바르게 구성되었고 서버에 안전하게 액세스할 수 있는지 확인합니다.\n\nLinux 또는 macOS에서 명령은 다음과 같습니다.\n\n```bash\nssh 사용자@서버_ip\n```\n\nWindows에서 PuTTY를 사용하는 경우 로그인하기 전에 개인 키 파일(.ppk)을 로드하는 것을 잊지 마십시오.\n\n## **결론: SSH 키를 사용한 고급 보안**\n\n비밀번호 대신 SSH 키를 사용하면 서버 액세스 보안이 크게 향상되고 인증을 위해 공개 키 암호화가 활용됩니다. 이는 특히 중요한 데이터에 액세스하거나 여러 서버를 관리하는 사용자에게 중요합니다. **SSH 키**를 사용하면 비밀번호 기반 공격으로부터 효과적으로 보호하고 서버 보안을 극대화할 수 있습니다. **SSH 키**는 최신 서버 관리의 필수적인 부분이며 모든 시스템 관리자가 알아야 할 보안 조치입니다.\n\n**지금 바로 SSH 키를 사용하여 Linux 서버의 보안을 강화하세요!**"},{"code":"pt","title":"Acesso Seguro a Servidores Linux: Autenticação com Chaves SSH","description":"Aprenda passo a passo como acessar servidores Linux de forma segura com chaves SSH em vez de senhas. Criação de chaves SSH, cópia para o servidor e muito mais.","excerpt":"Neste artigo, explicamos passo a passo como se conectar de forma mais segura aos seus servidores Linux usando chaves SSH em vez de senhas. Aprenda o que são chaves SSH, como gerá-las e como instalá-las no servidor.","keywords":["Chave SSH","Segurança do servidor Linux","Autenticação SSH","ssh-keygen","authorized_keys","PuTTYgen","acesso seguro","gerenciamento de servidor"],"cities":[],"content":"## **Introdução: Entendendo e Usando Chaves SSH**\n\nAs chaves SSH são uma forma muito mais segura de fazer login em um servidor Linux do que uma senha. Elas fornecem **segurança muito superior** em comparação com os métodos de autenticação baseados em senha. As chaves SSH usam criptografia de chave pública. Isso envolve a criação de um par de chaves: uma chave pública que pode ser compartilhada e uma chave privada que deve ser mantida em segredo. Em vez de usar uma senha, essas chaves verificam sua identidade, aumentando assim significativamente a segurança do seu servidor.\n\nAcessar servidores com **chaves SSH** elimina o risco de senhas serem quebradas ou roubadas. Este método é particularmente importante para usuários que gerenciam vários servidores ou acessam dados confidenciais. Ao configurar corretamente as chaves SSH, você pode garantir que seu servidor esteja protegido contra acesso não autorizado.\n\n## **Passo 1: Gerar um Par de Chaves**\n\nPrimeiro, você precisa gerar um par de chaves SSH em seu computador local. Isso é feito usando uma ferramenta como `ssh-keygen`, que está disponível no Linux, macOS e Windows. Os usuários do Windows também podem usar ferramentas como PuTTYgen ou WSL.\n\n### **Usando ssh-keygen no Linux ou macOS**\n\nAbrir um terminal e executar o comando `ssh-keygen`. A ferramenta solicitará que você especifique um local para salvar a chave. O local padrão é `/home/usuario/.ssh/id_rsa` para a chave privada e `/home/usuario/.ssh/id_rsa.pub` para a chave pública. Você também pode definir uma senha para sua chave para segurança adicional. Isso ajuda a evitar o uso não autorizado de sua chave privada.\n\n```bash\nssh-keygen\n```\n\nDepois de executar o comando, o terminal exibirá uma saída como esta:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/usuario/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/usuario/.ssh/id_rsa.\nYour public key has been saved in /home/usuario/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: caracteres_aleatorios usuario@nomedocomputador\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nDefinir uma senha é **importante** porque aumenta a segurança de sua chave privada. A senha impede o uso não autorizado de sua chave e bloqueia o acesso não autorizado aos seus servidores.\n\n### **Usando PuTTYgen no Windows**\n\nBaixe e abra o PuTTYgen. Clique no botão **Generate** (Gerar) e mova o mouse para criar aleatoriedade. O PuTTYgen gerará uma chave pública e privada. Salve a chave pública (para uso posterior) e a chave privada (como um arquivo .ppk). O PuTTYgen oferece uma maneira fácil para os usuários do Windows gerarem chaves SSH. Depois de gerar as chaves, lembre-se de armazená-las em um local seguro.\n\nNa tela do PuTTYgen, você verá a chave pública depois que ela for gerada. Copie esta chave e salve-a em um arquivo de texto. Você precisará desta chave para carregá-la em seu servidor mais tarde. Além disso, salve a chave privada como um arquivo .ppk. Este arquivo será usado para se conectar ao seu servidor com PuTTY.\n\n## **Passo 2: Copiar a Chave Pública para o Servidor**\n\nPara usar a chave SSH para autenticação, a chave pública precisa ser copiada para o arquivo `~/.ssh/authorized_keys` do servidor. Isso pode ser feito usando o comando `ssh-copy-id` ou copiando a chave manualmente.\n\n### **Usando ssh-copy-id**\n\nSe você tiver o comando `ssh-copy-id` em seu computador local, você pode usá-lo para copiar a chave pública para o servidor. A sintaxe básica é `ssh-copy-id usuario@ip_do_servidor`. Ele solicitará a senha do usuário no servidor. Este comando é a maneira mais fácil de copiar com segurança a chave pública para o servidor.\n\n```bash\nssh-copy-id usuario@ip_do_servidor\n```\n\nEste comando adicionará automaticamente sua chave pública ao arquivo `authorized_keys` do servidor. Depois de executar o comando, você pode tentar fazer login no servidor com a chave SSH.\n\n### **Copiando Manualmente a Chave Pública**\n\nSe `ssh-copy-id` não estiver disponível, você pode copiar manualmente o conteúdo do arquivo de chave pública (`~/.ssh/id_rsa.pub`) para o arquivo `~/.ssh/authorized_keys` no servidor. Primeiro, faça login no servidor usando uma senha. Em seguida, crie o diretório `.ssh` se ele não existir usando `mkdir -p ~/.ssh`. Em seguida, abra ou crie o arquivo `authorized_keys` usando um editor de texto como `nano ~/.ssh/authorized_keys` e cole a chave pública no arquivo. Salve e feche o arquivo. Este processo permite que você adicione manualmente sua chave pública ao servidor.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nQuando o editor de texto abrir, cole o conteúdo da sua chave pública. Salve o arquivo e feche-o. Agora você está pronto para fazer login no servidor com a chave SSH.\n\n## **Passo 3: Fazer Login no Servidor Usando a Chave SSH**\n\nDepois que a chave pública estiver configurada, você poderá fazer login no servidor usando a chave SSH. No Linux ou macOS, isso é feito usando o comando `ssh usuario@ip_do_servidor`. Se você definiu uma senha, será solicitado que você a insira. No Windows, use PuTTY, especifique o endereço IP do servidor e carregue o arquivo de chave privada (.ppk) em Connection > SSH > Auth. Esta etapa verifica se as chaves SSH estão configuradas corretamente e se você pode acessar seu servidor com segurança.\n\nNo Linux ou macOS, o comando é o seguinte:\n\n```bash\nssh usuario@ip_do_servidor\n```\n\nSe você estiver usando PuTTY no Windows, lembre-se de carregar o arquivo de chave privada (.ppk) antes de fazer login.\n\n## **Conclusão: Segurança Aprimorada com Chaves SSH**\n\nAo usar chaves SSH em vez de senhas, a segurança do acesso ao servidor é significativamente aprimorada e a criptografia de chave pública é aproveitada para autenticação. Isso é especialmente importante para usuários que acessam dados confidenciais ou gerenciam vários servidores. O uso de **chaves SSH** fornece proteção eficaz contra ataques baseados em senhas e maximiza a segurança do seu servidor. As **chaves SSH** são uma parte indispensável do gerenciamento moderno de servidores e uma medida de segurança que todo administrador de sistemas deve conhecer.\n\n**Comece a usar chaves SSH hoje para aumentar a segurança de seus servidores Linux!**"},{"code":"nl","title":"Veilige toegang tot Linux-servers: authenticatie met SSH-sleutels","description":"Leer stap voor stap hoe u veilig toegang kunt krijgen tot Linux-servers met SSH-sleutels in plaats van wachtwoorden. SSH-sleutel genereren, naar server kopiëren en meer.","excerpt":"In dit artikel leggen we stap voor stap uit hoe u veiliger verbinding kunt maken met uw Linux-servers met behulp van SSH-sleutels in plaats van wachtwoorden. Leer wat SSH-sleutels zijn, hoe u ze genereert en hoe u ze op de server installeert.","keywords":["SSH-sleutel","Linux serverbeveiliging","SSH-authenticatie","ssh-keygen","authorized_keys","PuTTYgen","veilige toegang","serverbeheer"],"cities":[],"content":"## **Inleiding: SSH-sleutels begrijpen en gebruiken**\n\nSSH-sleutels zijn een veel veiligere manier om in te loggen op een Linux-server dan een wachtwoord. Ze bieden een **veel superieure beveiliging** in vergelijking met wachtwoordgebaseerde authenticatiemethoden. SSH-sleutels gebruiken public-key cryptografie. Dit omvat het maken van een paar sleutels: een openbare sleutel die kan worden gedeeld en een private sleutel die geheim moet worden gehouden. In plaats van een wachtwoord te gebruiken, verifiëren deze sleutels uw identiteit, waardoor de beveiliging van uw server aanzienlijk toeneemt.\n\nToegang tot servers met **SSH-sleutels** elimineert het risico dat wachtwoorden worden gekraakt of gestolen. Deze methode is vooral belangrijk voor gebruikers die meerdere servers beheren of toegang hebben tot gevoelige gegevens. Door SSH-sleutels correct te configureren, kunt u ervoor zorgen dat uw server is beschermd tegen ongeautoriseerde toegang.\n\n## **Stap 1: Genereer een sleutelpaar**\n\nEerst moet u een SSH-sleutelpaar genereren op uw lokale computer. Dit wordt gedaan met behulp van een tool zoals `ssh-keygen`, die beschikbaar is op Linux, macOS en Windows. Windows-gebruikers kunnen ook tools zoals PuTTYgen of WSL gebruiken.\n\n### **ssh-keygen gebruiken op Linux of macOS**\n\nOpen een terminal en voer de opdracht `ssh-keygen` uit. De tool zal u vragen om een locatie op te geven om de sleutel op te slaan. De standaardlocatie is `/home/gebruiker/.ssh/id_rsa` voor de private sleutel en `/home/gebruiker/.ssh/id_rsa.pub` voor de openbare sleutel. U kunt ook een wachtwoordzin instellen voor uw sleutel voor extra beveiliging. Dit helpt ongeautoriseerd gebruik van uw private sleutel te voorkomen.\n\n```bash\nssh-keygen\n```\n\nNa het uitvoeren van de opdracht, zal de terminal een uitvoer weergeven zoals deze:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/gebruiker/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/gebruiker/.ssh/id_rsa.\nYour public key has been saved in /home/gebruiker/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: willekeurige_tekens gebruiker@computernaam\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nHet instellen van een wachtwoordzin is **belangrijk** omdat het de beveiliging van uw private sleutel verhoogt. De wachtwoordzin voorkomt ongeautoriseerd gebruik van uw sleutel en blokkeert ongeautoriseerde toegang tot uw servers.\n\n### **PuTTYgen gebruiken op Windows**\n\nDownload en open PuTTYgen. Klik op de knop **Generate** (Genereren) en beweeg uw muis om willekeur te creëren. PuTTYgen genereert een openbare en private sleutel. Sla de openbare sleutel op (voor later gebruik) en de private sleutel (als een .ppk-bestand). PuTTYgen biedt een eenvoudige manier voor Windows-gebruikers om SSH-sleutels te genereren. Nadat u de sleutels hebt gegenereerd, vergeet dan niet om ze op een veilige plaats op te slaan.\n\nOp het PuTTYgen-scherm ziet u de openbare sleutel nadat deze is gegenereerd. Kopieer deze sleutel en sla hem op in een tekstbestand. U hebt deze sleutel nodig om hem later naar uw server te uploaden. Sla de private sleutel ook op als een .ppk-bestand. Dit bestand wordt gebruikt om met PuTTY verbinding te maken met uw server.\n\n## **Stap 2: Kopieer de openbare sleutel naar de server**\n\nOm de SSH-sleutel voor authenticatie te gebruiken, moet de openbare sleutel worden gekopieerd naar het bestand `~/.ssh/authorized_keys` van de server. Dit kan worden gedaan met behulp van de opdracht `ssh-copy-id` of door de sleutel handmatig te kopiëren.\n\n### **ssh-copy-id gebruiken**\n\nAls u de opdracht `ssh-copy-id` op uw lokale computer hebt, kunt u deze gebruiken om de openbare sleutel naar de server te kopiëren. De basis syntaxis is `ssh-copy-id gebruiker@server_ip`. Het zal vragen om het wachtwoord van de gebruiker op de server. Deze opdracht is de eenvoudigste manier om de openbare sleutel veilig naar de server te kopiëren.\n\n```bash\nssh-copy-id gebruiker@server_ip\n```\n\nDeze opdracht voegt uw openbare sleutel automatisch toe aan het bestand `authorized_keys` van de server. Na het uitvoeren van de opdracht, kunt u proberen in te loggen op de server met de SSH-sleutel.\n\n### **De openbare sleutel handmatig kopiëren**\n\nAls `ssh-copy-id` niet beschikbaar is, kunt u de inhoud van het openbare sleutelbestand (`~/.ssh/id_rsa.pub`) handmatig kopiëren naar het bestand `~/.ssh/authorized_keys` op de server. Log eerst in op de server met een wachtwoord. Maak vervolgens de `.ssh` directory aan als deze niet bestaat met behulp van `mkdir -p ~/.ssh`. Open of maak vervolgens het bestand `authorized_keys` met behulp van een teksteditor zoals `nano ~/.ssh/authorized_keys` en plak de openbare sleutel in het bestand. Sla het bestand op en sluit het. Met dit proces kunt u uw openbare sleutel handmatig aan de server toevoegen.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nWanneer de teksteditor opent, plakt u de inhoud van uw openbare sleutel. Sla het bestand op en sluit het. U bent nu klaar om in te loggen op de server met de SSH-sleutel.\n\n## **Stap 3: Log in op de server met de SSH-sleutel**\n\nZodra de openbare sleutel is ingesteld, kunt u inloggen op de server met behulp van de SSH-sleutel. Op Linux of macOS wordt dit gedaan met behulp van de opdracht `ssh gebruiker@server_ip`. Als u een wachtwoordzin hebt ingesteld, wordt u gevraagd om deze in te voeren. Gebruik op Windows PuTTY, specificeer het IP-adres van de server en laad het private sleutelbestand (.ppk) onder Connection > SSH > Auth. Deze stap verifieert dat de SSH-sleutels correct zijn geconfigureerd en dat u veilig toegang hebt tot uw server.\n\nOp Linux of macOS is de opdracht als volgt:\n\n```bash\nssh gebruiker@server_ip\n```\n\nAls u PuTTY op Windows gebruikt, vergeet dan niet om het private sleutelbestand (.ppk) te laden voordat u inlogt.\n\n## **Conclusie: Verbeterde beveiliging met SSH-sleutels**\n\nDoor SSH-sleutels te gebruiken in plaats van wachtwoorden, wordt de beveiliging van servertoegang aanzienlijk verbeterd en wordt public-key cryptografie gebruikt voor authenticatie. Dit is vooral belangrijk voor gebruikers die toegang hebben tot gevoelige gegevens of meerdere servers beheren. Het gebruik van **SSH-sleutels** biedt effectieve bescherming tegen wachtwoordgebaseerde aanvallen en maximaliseert de beveiliging van uw server. **SSH-sleutels** zijn een onmisbaar onderdeel van modern serverbeheer en een veiligheidsmaatregel die elke systeembeheerder moet kennen.\n\n**Begin vandaag nog met het gebruik van SSH-sleutels om de beveiliging van uw Linux-servers te verbeteren!**"},{"code":"fa","title":"دسترسی ایمن به سرورهای لینوکس: احراز هویت با کلیدهای SSH","description":"در مورد نحوه دسترسی ایمن به سرورهای لینوکس با کلیدهای SSH به جای رمز عبور، گام به گام بیاموزید. ایجاد کلید SSH، کپی کردن به سرور و موارد دیگر.","excerpt":"در این مقاله، نحوه اتصال ایمن تر به سرورهای لینوکس خود را با استفاده از کلیدهای SSH به جای رمز عبور، گام به گام توضیح می دهیم. بیاموزید که کلیدهای SSH چیست، چگونه تولید می شوند و چگونه روی سرور نصب می شوند.","keywords":["کلید SSH","امنیت سرور لینوکس","احراز هویت SSH","ssh-keygen","authorized_keys","PuTTYgen","دسترسی ایمن","مدیریت سرور"],"cities":[],"content":"## **مقدمه: درک و استفاده از کلیدهای SSH**\n\nکلیدهای SSH یک راه بسیار امن تر برای ورود به یک سرور لینوکس نسبت به رمز عبور هستند. آنها در مقایسه با روش های احراز هویت مبتنی بر رمز عبور، **امنیت بسیار بالاتری** را ارائه می دهند. کلیدهای SSH از رمزنگاری کلید عمومی استفاده می کنند. این شامل ایجاد یک جفت کلید است: یک کلید عمومی که می تواند به اشتراک گذاشته شود و یک کلید خصوصی که باید مخفی نگه داشته شود. به جای استفاده از رمز عبور، این کلیدها هویت شما را تأیید می کنند و در نتیجه امنیت سرور شما را به میزان قابل توجهی افزایش می دهند.\n\nدسترسی به سرورها با **کلیدهای SSH** خطر شکسته شدن یا سرقت رمزهای عبور را از بین می برد. این روش به ویژه برای کاربرانی که چندین سرور را مدیریت می کنند یا به داده های حساس دسترسی دارند، مهم است. با پیکربندی صحیح کلیدهای SSH، می توانید اطمینان حاصل کنید که سرور شما در برابر دسترسی غیرمجاز محافظت می شود.\n\n## **گام 1: ایجاد یک جفت کلید**\n\nابتدا باید یک جفت کلید SSH در رایانه محلی خود ایجاد کنید. این کار با استفاده از ابزاری مانند `ssh-keygen` انجام می شود که در لینوکس، macOS و ویندوز موجود است. کاربران ویندوز همچنین می توانند از ابزارهایی مانند PuTTYgen یا WSL استفاده کنند.\n\n### **استفاده از ssh-keygen در لینوکس یا macOS**\n\nیک ترمینال باز کنید و دستور `ssh-keygen` را اجرا کنید. این ابزار از شما می خواهد مکانی را برای ذخیره کلید مشخص کنید. مکان پیش فرض `/home/username/.ssh/id_rsa` برای کلید خصوصی و `/home/username/.ssh/id_rsa.pub` برای کلید عمومی است. همچنین می توانید یک عبارت عبور برای کلید خود برای امنیت بیشتر تنظیم کنید. این به جلوگیری از استفاده غیرمجاز از کلید خصوصی شما کمک می کند.\n\n```bash\nssh-keygen\n```\n\nپس از اجرای دستور، ترمینال خروجی مانند این را نمایش می دهد:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/username/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/username/.ssh/id_rsa.\nYour public key has been saved in /home/username/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: نویسه_های_تصادفی username@computername\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nتنظیم یک عبارت عبور **مهم** است زیرا امنیت کلید خصوصی شما را افزایش می دهد. عبارت عبور از استفاده غیرمجاز از کلید شما جلوگیری می کند و از دسترسی غیرمجاز به سرورهای شما جلوگیری می کند.\n\n### **استفاده از PuTTYgen در ویندوز**\n\nPuTTYgen را دانلود و باز کنید. روی دکمه **Generate** (تولید) کلیک کنید و ماوس خود را حرکت دهید تا تصادفی ایجاد شود. PuTTYgen یک کلید عمومی و خصوصی ایجاد می کند. کلید عمومی (برای استفاده بعدی) و کلید خصوصی (به عنوان یک فایل .ppk) را ذخیره کنید. PuTTYgen راهی آسان برای کاربران ویندوز برای تولید کلیدهای SSH ارائه می دهد. پس از تولید کلیدها، به یاد داشته باشید که آنها را در مکانی امن نگهداری کنید.\n\nدر صفحه PuTTYgen، پس از تولید کلید، کلید عمومی را خواهید دید. این کلید را کپی کرده و در یک فایل متنی ذخیره کنید. برای آپلود آن در سرور خود بعداً به این کلید نیاز خواهید داشت. همچنین، کلید خصوصی را به عنوان یک فایل .ppk ذخیره کنید. این فایل برای اتصال به سرور شما با PuTTY استفاده می شود.\n\n## **گام 2: کپی کردن کلید عمومی به سرور**\n\nبرای استفاده از کلید SSH برای احراز هویت، کلید عمومی باید در فایل `~/.ssh/authorized_keys` سرور کپی شود. این کار را می توان با استفاده از دستور `ssh-copy-id` یا با کپی کردن دستی کلید انجام داد.\n\n### **استفاده از ssh-copy-id**\n\nاگر دستور `ssh-copy-id` را روی رایانه محلی خود دارید، می توانید از آن برای کپی کردن کلید عمومی به سرور استفاده کنید. نحو اساسی `ssh-copy-id user@server_ip` است. از شما رمز عبور کاربر را در سرور می خواهد. این دستور ساده ترین راه برای کپی ایمن کلید عمومی به سرور است.\n\n```bash\nssh-copy-id user@server_ip\n```\n\nاین دستور به طور خودکار کلید عمومی شما را به فایل `authorized_keys` سرور اضافه می کند. پس از اجرای دستور، می توانید سعی کنید با کلید SSH وارد سرور شوید.\n\n### **کپی کردن دستی کلید عمومی**\n\nاگر `ssh-copy-id` در دسترس نیست، می توانید محتویات فایل کلید عمومی (`~/.ssh/id_rsa.pub`) را به صورت دستی در فایل `~/.ssh/authorized_keys` در سرور کپی کنید. ابتدا با استفاده از رمز عبور وارد سرور شوید. سپس، اگر دایرکتوری `.ssh` وجود ندارد، آن را با استفاده از `mkdir -p ~/.ssh` ایجاد کنید. در مرحله بعد، فایل `authorized_keys` را با استفاده از یک ویرایشگر متن مانند `nano ~/.ssh/authorized_keys` باز یا ایجاد کنید و کلید عمومی را در فایل جایگذاری کنید. فایل را ذخیره و ببندید. این فرآیند به شما امکان می دهد کلید عمومی خود را به صورت دستی به سرور اضافه کنید.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nهنگامی که ویرایشگر متن باز شد، محتویات کلید عمومی خود را جایگذاری کنید. فایل را ذخیره و ببندید. اکنون آماده ورود به سرور با کلید SSH هستید.\n\n## **گام 3: ورود به سرور با استفاده از کلید SSH**\n\nهنگامی که کلید عمومی تنظیم شد، می توانید با استفاده از کلید SSH وارد سرور شوید. در لینوکس یا macOS، این کار با استفاده از دستور `ssh user@server_ip` انجام می شود. اگر یک عبارت عبور تنظیم کرده اید، از شما خواسته می شود آن را وارد کنید. در ویندوز، از PuTTY استفاده کنید، آدرس IP سرور را مشخص کنید و فایل کلید خصوصی (.ppk) را در Connection > SSH > Auth بارگیری کنید. این مرحله تأیید می کند که کلیدهای SSH به درستی پیکربندی شده اند و می توانید با خیال راحت به سرور خود دسترسی داشته باشید.\n\nدر لینوکس یا macOS، دستور به شرح زیر است:\n\n```bash\nssh user@server_ip\n```\n\nاگر از PuTTY در ویندوز استفاده می کنید، به یاد داشته باشید که قبل از ورود به سیستم، فایل کلید خصوصی (.ppk) را بارگیری کنید.\n\n## **نتیجه گیری: امنیت پیشرفته با کلیدهای SSH**\n\nبا استفاده از کلیدهای SSH به جای رمزهای عبور، امنیت دسترسی به سرور به طور قابل توجهی بهبود می یابد و از رمزنگاری کلید عمومی برای احراز هویت استفاده می شود. این به ویژه برای کاربرانی که به داده های حساس دسترسی دارند یا چندین سرور را مدیریت می کنند، مهم است. استفاده از **کلیدهای SSH** محافظت موثری در برابر حملات مبتنی بر رمز عبور ارائه می دهد و امنیت سرور شما را به حداکثر می رساند. **کلیدهای SSH** جزء لاینفک مدیریت مدرن سرور هستند و یک اقدام امنیتی هستند که هر مدیر سیستم باید از آن آگاه باشد.\n\n**همین امروز استفاده از کلیدهای SSH را برای افزایش امنیت سرورهای لینوکس خود شروع کنید!**"},{"code":"de","title":"Sicherer Zugriff auf Linux-Server: Authentifizierung mit SSH-Schlüsseln","description":"Erfahren Sie Schritt für Schritt, wie Sie mit SSH-Schlüsseln anstelle von Passwörtern sicher auf Linux-Server zugreifen. SSH-Schlüssel erstellen, auf den Server kopieren und mehr.","excerpt":"In diesem Artikel erklären wir Schritt für Schritt, wie Sie mit SSH-Schlüsseln anstelle von Passwörtern eine sicherere Verbindung zu Ihren Linux-Servern herstellen können. Erfahren Sie, was SSH-Schlüssel sind, wie sie generiert werden und wie sie auf dem Server installiert werden.","keywords":["SSH-Schlüssel","Linux Server Sicherheit","SSH-Authentifizierung","ssh-keygen","authorized_keys","PuTTYgen","sicherer Zugriff","Serververwaltung"],"cities":[],"content":"## **Einführung: SSH-Schlüssel verstehen und verwenden**\n\nSSH-Schlüssel sind eine viel sicherere Möglichkeit, sich bei einem Linux-Server anzumelden als ein Passwort. Sie bieten im Vergleich zu passwortbasierten Authentifizierungsmethoden eine **viel höhere Sicherheit**. SSH-Schlüssel verwenden Public-Key-Kryptographie. Dies beinhaltet das Erstellen eines Schlüsselpaares: ein öffentlicher Schlüssel, der freigegeben werden kann, und ein privater Schlüssel, der geheim gehalten werden muss. Anstatt ein Passwort zu verwenden, verifizieren diese Schlüssel Ihre Identität, wodurch die Sicherheit Ihres Servers erheblich erhöht wird.\n\nDer Zugriff auf Server mit **SSH-Schlüsseln** eliminiert das Risiko, dass Passwörter geknackt oder gestohlen werden. Diese Methode ist besonders wichtig für Benutzer, die mehrere Server verwalten oder auf sensible Daten zugreifen. Durch die korrekte Konfiguration von SSH-Schlüsseln können Sie sicherstellen, dass Ihr Server vor unbefugtem Zugriff geschützt ist.\n\n## **Schritt 1: Erstellen eines Schlüsselpaares**\n\nZuerst müssen Sie ein SSH-Schlüsselpaar auf Ihrem lokalen Computer erstellen. Dies geschieht mit einem Tool wie `ssh-keygen`, das unter Linux, macOS und Windows verfügbar ist. Windows-Benutzer können auch Tools wie PuTTYgen oder WSL verwenden.\n\n### **Verwendung von ssh-keygen unter Linux oder macOS**\n\nÖffnen Sie ein Terminal und führen Sie den Befehl `ssh-keygen` aus. Das Tool fordert Sie auf, einen Speicherort zum Speichern des Schlüssels anzugeben. Der Standardspeicherort ist `/home/benutzer/.ssh/id_rsa` für den privaten Schlüssel und `/home/benutzer/.ssh/id_rsa.pub` für den öffentlichen Schlüssel. Sie können auch eine Passphrase für Ihren Schlüssel für zusätzliche Sicherheit festlegen. Dies hilft, die unbefugte Verwendung Ihres privaten Schlüssels zu verhindern.\n\n```bash\nssh-keygen\n```\n\nNachdem Sie den Befehl ausgeführt haben, zeigt das Terminal eine Ausgabe wie diese an:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/benutzer/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/benutzer/.ssh/id_rsa.\nYour public key has been saved in /home/benutzer/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: zufällige_zeichen benutzer@computername\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nDas Festlegen einer Passphrase ist **wichtig**, da dies die Sicherheit Ihres privaten Schlüssels erhöht. Die Passphrase verhindert die unbefugte Verwendung Ihres Schlüssels und blockiert den unbefugten Zugriff auf Ihre Server.\n\n### **Verwendung von PuTTYgen unter Windows**\n\nLaden Sie PuTTYgen herunter und öffnen Sie es. Klicken Sie auf die Schaltfläche **Generate** (Generieren) und bewegen Sie Ihre Maus, um Zufälligkeit zu erzeugen. PuTTYgen generiert einen öffentlichen und einen privaten Schlüssel. Speichern Sie den öffentlichen Schlüssel (zur späteren Verwendung) und den privaten Schlüssel (als .ppk-Datei). PuTTYgen bietet Windows-Benutzern eine einfache Möglichkeit, SSH-Schlüssel zu generieren. Nachdem Sie die Schlüssel generiert haben, vergessen Sie nicht, sie an einem sicheren Ort zu speichern.\n\nAuf dem PuTTYgen-Bildschirm sehen Sie den öffentlichen Schlüssel, nachdem er generiert wurde. Kopieren Sie diesen Schlüssel und speichern Sie ihn in einer Textdatei. Sie benötigen diesen Schlüssel, um ihn später auf Ihren Server hochzuladen. Speichern Sie den privaten Schlüssel auch als .ppk-Datei. Diese Datei wird verwendet, um sich mit PuTTY mit Ihrem Server zu verbinden.\n\n## **Schritt 2: Kopieren des öffentlichen Schlüssels auf den Server**\n\nUm den SSH-Schlüssel für die Authentifizierung zu verwenden, muss der öffentliche Schlüssel in die Datei `~/.ssh/authorized_keys` des Servers kopiert werden. Dies kann mit dem Befehl `ssh-copy-id` oder durch manuelles Kopieren des Schlüssels erfolgen.\n\n### **Verwendung von ssh-copy-id**\n\nWenn Sie den Befehl `ssh-copy-id` auf Ihrem lokalen Computer haben, können Sie ihn verwenden, um den öffentlichen Schlüssel auf den Server zu kopieren. Die grundlegende Syntax lautet `ssh-copy-id benutzer@server_ip`. Es fordert das Passwort des Benutzers auf dem Server an. Dieser Befehl ist der einfachste Weg, um den öffentlichen Schlüssel sicher auf den Server zu kopieren.\n\n```bash\nssh-copy-id benutzer@server_ip\n```\n\nDieser Befehl fügt Ihren öffentlichen Schlüssel automatisch zur Datei `authorized_keys` des Servers hinzu. Nach dem Ausführen des Befehls können Sie versuchen, sich mit dem SSH-Schlüssel beim Server anzumelden.\n\n### **Manuelles Kopieren des öffentlichen Schlüssels**\n\nWenn `ssh-copy-id` nicht verfügbar ist, können Sie den Inhalt der öffentlichen Schlüsseldatei (`~/.ssh/id_rsa.pub`) manuell in die Datei `~/.ssh/authorized_keys` auf dem Server kopieren. Melden Sie sich zuerst mit einem Passwort beim Server an. Erstellen Sie dann das Verzeichnis `.ssh`, falls es nicht vorhanden ist, mit `mkdir -p ~/.ssh`. Öffnen oder erstellen Sie anschließend die Datei `authorized_keys` mit einem Texteditor wie `nano ~/.ssh/authorized_keys` und fügen Sie den öffentlichen Schlüssel in die Datei ein. Speichern und schließen Sie die Datei. Mit diesem Vorgang können Sie Ihren öffentlichen Schlüssel manuell zum Server hinzufügen.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nWenn sich der Texteditor öffnet, fügen Sie den Inhalt Ihres öffentlichen Schlüssels ein. Speichern und schließen Sie die Datei. Sie können sich jetzt mit dem SSH-Schlüssel beim Server anmelden.\n\n## **Schritt 3: Anmelden beim Server mit dem SSH-Schlüssel**\n\nSobald der öffentliche Schlüssel eingerichtet ist, können Sie sich mit dem SSH-Schlüssel beim Server anmelden. Unter Linux oder macOS geschieht dies mit dem Befehl `ssh benutzer@server_ip`. Wenn Sie eine Passphrase festgelegt haben, werden Sie aufgefordert, diese einzugeben. Verwenden Sie unter Windows PuTTY, geben Sie die IP-Adresse des Servers an und laden Sie die private Schlüsseldatei (.ppk) unter Connection > SSH > Auth. Dieser Schritt überprüft, ob die SSH-Schlüssel korrekt konfiguriert sind und Sie sicher auf Ihren Server zugreifen können.\n\nUnter Linux oder macOS lautet der Befehl wie folgt:\n\n```bash\nssh benutzer@server_ip\n```\n\nWenn Sie PuTTY unter Windows verwenden, denken Sie daran, die private Schlüsseldatei (.ppk) zu laden, bevor Sie sich anmelden.\n\n## **Fazit: Verbesserte Sicherheit mit SSH-Schlüsseln**\n\nDurch die Verwendung von SSH-Schlüsseln anstelle von Passwörtern wird die Sicherheit des Serverzugriffs erheblich verbessert und die Public-Key-Kryptographie für die Authentifizierung genutzt. Dies ist besonders wichtig für Benutzer, die auf sensible Daten zugreifen oder mehrere Server verwalten. Die Verwendung von **SSH-Schlüsseln** bietet einen wirksamen Schutz vor passwortbasierten Angriffen und maximiert die Sicherheit Ihres Servers. **SSH-Schlüssel** sind ein unverzichtbarer Bestandteil der modernen Serververwaltung und eine Sicherheitsmaßnahme, die jeder Systemadministrator kennen sollte.\n\n**Beginnen Sie noch heute mit der Verwendung von SSH-Schlüsseln, um die Sicherheit Ihrer Linux-Server zu erhöhen!**"},{"code":"fr","title":"Accès sécurisé aux serveurs Linux : authentification avec les clés SSH","description":"Découvrez étape par étape comment accéder en toute sécurité aux serveurs Linux avec des clés SSH au lieu de mots de passe. Création de clé SSH, copie sur le serveur et plus encore.","excerpt":"Dans cet article, nous expliquons étape par étape comment vous connecter plus sûrement à vos serveurs Linux en utilisant des clés SSH au lieu de mots de passe. Découvrez ce que sont les clés SSH, comment les générer et comment les installer sur le serveur.","keywords":["Clé SSH","Sécurité du serveur Linux","Authentification SSH","ssh-keygen","authorized_keys","PuTTYgen","accès sécurisé","gestion de serveur"],"cities":[],"content":"## **Introduction : comprendre et utiliser les clés SSH**\n\nLes clés SSH sont un moyen beaucoup plus sûr de se connecter à un serveur Linux qu’un mot de passe. Elles offrent une **sécurité bien supérieure** par rapport aux méthodes d’authentification basées sur mot de passe. Les clés SSH utilisent le chiffrement à clé publique. Cela implique la création d’une paire de clés : une clé publique qui peut être partagée et une clé privée qui doit rester secrète. Au lieu d’utiliser un mot de passe, ces clés vérifient votre identité, ce qui augmente considérablement la sécurité de votre serveur.\n\nL’accès aux serveurs avec les **clés SSH** élimine le risque de piratage ou de vol de mots de passe. Cette méthode est particulièrement importante pour les utilisateurs qui gèrent plusieurs serveurs ou qui accèdent à des données sensibles. En configurant correctement les clés SSH, vous pouvez vous assurer que votre serveur est protégé contre tout accès non autorisé.\n\n## **Étape 1 : générer une paire de clés**\n\nTout d’abord, vous devez générer une paire de clés SSH sur votre ordinateur local. Cela se fait à l’aide d’un outil tel que `ssh-keygen`, qui est disponible sous Linux, macOS et Windows. Les utilisateurs de Windows peuvent également utiliser des outils tels que PuTTYgen ou WSL.\n\n### **Utilisation de ssh-keygen sous Linux ou macOS**\n\nOuvrez un terminal et exécutez la commande `ssh-keygen`. L’outil vous demandera de spécifier un emplacement pour enregistrer la clé. L’emplacement par défaut est `/home/utilisateur/.ssh/id_rsa` pour la clé privée et `/home/utilisateur/.ssh/id_rsa.pub` pour la clé publique. Vous pouvez également définir une phrase de passe pour votre clé pour plus de sécurité. Cela permet d’empêcher l’utilisation non autorisée de votre clé privée.\n\n```bash\nssh-keygen\n```\n\nAprès avoir exécuté la commande, le terminal affichera une sortie comme celle-ci :\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/utilisateur/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/utilisateur/.ssh/id_rsa.\nYour public key has been saved in /home/utilisateur/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: caractères_aléatoires utilisateur@nomordinateur\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nIl est **important** de définir une phrase de passe, car cela augmente la sécurité de votre clé privée. La phrase de passe empêche l’utilisation non autorisée de votre clé et bloque l’accès non autorisé à vos serveurs.\n\n### **Utilisation de PuTTYgen sous Windows**\n\nTéléchargez et ouvrez PuTTYgen. Cliquez sur le bouton **Generate** (Générer) et déplacez votre souris pour créer de l’aléatoire. PuTTYgen générera une clé publique et une clé privée. Enregistrez la clé publique (pour une utilisation ultérieure) et la clé privée (en tant que fichier .ppk). PuTTYgen offre aux utilisateurs de Windows un moyen simple de générer des clés SSH. Après avoir généré les clés, n’oubliez pas de les stocker dans un endroit sûr.\n\nSur l’écran PuTTYgen, vous verrez la clé publique une fois qu’elle aura été générée. Copiez cette clé et enregistrez-la dans un fichier texte. Vous aurez besoin de cette clé pour la télécharger ultérieurement sur votre serveur. Enregistrez également la clé privée en tant que fichier .ppk. Ce fichier sera utilisé pour vous connecter à votre serveur avec PuTTY.\n\n## **Étape 2 : copier la clé publique sur le serveur**\n\nPour utiliser la clé SSH pour l’authentification, la clé publique doit être copiée dans le fichier `~/.ssh/authorized_keys` du serveur. Cela peut se faire à l’aide de la commande `ssh-copy-id` ou en copiant la clé manuellement.\n\n### **Utilisation de ssh-copy-id**\n\nSi vous avez la commande `ssh-copy-id` sur votre ordinateur local, vous pouvez l’utiliser pour copier la clé publique sur le serveur. La syntaxe de base est `ssh-copy-id utilisateur@ip_serveur`. Il demandera le mot de passe de l’utilisateur sur le serveur. Cette commande est le moyen le plus simple de copier en toute sécurité la clé publique sur le serveur.\n\n```bash\nssh-copy-id utilisateur@ip_serveur\n```\n\nCette commande ajoutera automatiquement votre clé publique au fichier `authorized_keys` du serveur. Après avoir exécuté la commande, vous pouvez essayer de vous connecter au serveur avec la clé SSH.\n\n### **Copie manuelle de la clé publique**\n\nSi `ssh-copy-id` n’est pas disponible, vous pouvez copier manuellement le contenu du fichier de clé publique (`~/.ssh/id_rsa.pub`) dans le fichier `~/.ssh/authorized_keys` sur le serveur. Tout d’abord, connectez-vous au serveur en utilisant un mot de passe. Ensuite, créez le répertoire `.ssh` s’il n’existe pas en utilisant `mkdir -p ~/.ssh`. Ensuite, ouvrez ou créez le fichier `authorized_keys` à l’aide d’un éditeur de texte tel que `nano ~/.ssh/authorized_keys` et collez la clé publique dans le fichier. Enregistrez et fermez le fichier. Ce processus vous permet d’ajouter manuellement votre clé publique au serveur.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nLorsque l’éditeur de texte s’ouvre, collez le contenu de votre clé publique. Enregistrez et fermez le fichier. Vous êtes maintenant prêt à vous connecter au serveur avec la clé SSH.\n\n## **Étape 3 : se connecter au serveur à l’aide de la clé SSH**\n\nUne fois la clé publique configurée, vous pouvez vous connecter au serveur à l’aide de la clé SSH. Sous Linux ou macOS, cela se fait à l’aide de la commande `ssh utilisateur@ip_serveur`. Si vous avez défini une phrase de passe, vous serez invité à la saisir. Sous Windows, utilisez PuTTY, spécifiez l’adresse IP du serveur et chargez le fichier de clé privée (.ppk) sous Connection > SSH > Auth. Cette étape vérifie que les clés SSH sont correctement configurées et que vous pouvez accéder à votre serveur en toute sécurité.\n\nSous Linux ou macOS, la commande est la suivante :\n\n```bash\nssh utilisateur@ip_serveur\n```\n\nSi vous utilisez PuTTY sous Windows, n’oubliez pas de charger le fichier de clé privée (.ppk) avant de vous connecter.\n\n## **Conclusion : sécurité renforcée avec les clés SSH**\n\nEn utilisant des clés SSH au lieu de mots de passe, la sécurité de l’accès au serveur est considérablement améliorée et le chiffrement à clé publique est utilisé pour l’authentification. Cela est particulièrement important pour les utilisateurs qui accèdent à des données sensibles ou qui gèrent plusieurs serveurs. L’utilisation des **clés SSH** offre une protection efficace contre les attaques basées sur mot de passe et maximise la sécurité de votre serveur. Les **clés SSH** sont un élément indispensable de la gestion moderne des serveurs et une mesure de sécurité que tout administrateur système doit connaître.\n\n**Commencez dès aujourd’hui à utiliser les clés SSH pour renforcer la sécurité de vos serveurs Linux !**"},{"code":"ja","title":"Linuxサーバーへの安全なアクセス：SSHキーによる認証","description":"パスワードの代わりにSSHキーを使用してLinuxサーバーに安全にアクセスする方法をステップごとに学びます。SSHキーの作成、サーバーへのコピーなど。","excerpt":"この記事では、パスワードの代わりにSSHキーを使用してLinuxサーバーへより安全に接続する方法をステップごとに説明します。SSHキーとは何か、どのように生成されるか、サーバーへのインストール方法を学びます。","keywords":["SSHキー","Linuxサーバーセキュリティ","SSH認証","ssh-keygen","authorized_keys","PuTTYgen","安全なアクセス","サーバー管理"],"cities":[],"content":"## **はじめに：SSHキーを理解して使用する**\n\nSSHキーは、パスワードよりもはるかに安全にLinuxサーバーにログインする方法です。パスワードベースの認証方法と比較して**はるかに優れたセキュリティ**を提供します。SSHキーは、公開鍵暗号を使用します。これには、共有できる公開キーと、秘密にしておく必要のある秘密キーのペアを作成することが含まれます。パスワードを使用する代わりに、これらのキーがあなたの身元を検証し、サーバーのセキュリティを大幅に向上させます。\n\n**SSHキー**によるサーバーへのアクセスは、パスワードが破られたり盗まれたりするリスクを排除します。この方法は、特に複数のサーバーを管理するユーザーや機密データにアクセスするユーザーにとって重要です。SSHキーを正しく構成することで、サーバーを不正アクセスから保護できます。\n\n## **ステップ1：キーペアを作成する**\n\nまず、ローカルコンピューターでSSHキーペアを作成する必要があります。これは、Linux、macOS、およびWindowsで使用可能な`ssh-keygen`などのツールを使用して行われます。Windowsユーザーは、PuTTYgenやWSLなどのツールも使用できます。\n\n### **LinuxまたはmacOSでのssh-keygenの使用**\n\nターミナルを開き、`ssh-keygen`コマンドを実行します。ツールは、キーを保存する場所を指定するように求めます。デフォルトの場所は、秘密キーの場合は`/home/ユーザー名/.ssh/id_rsa`、公開キーの場合は`/home/ユーザー名/.ssh/id_rsa.pub`です。キーに追加のセキュリティを追加するために、パスフレーズを設定することもできます。これにより、秘密キーの不正使用を防ぐことができます。\n\n```bash\nssh-keygen\n```\n\nコマンドを実行すると、ターミナルに次のような出力が表示されます。\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/ユーザー名/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/ユーザー名/.ssh/id_rsa.\nYour public key has been saved in /home/ユーザー名/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: ランダムな文字 ユーザー名@コンピューター名\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nパスフレーズの設定は**重要**です。これは、秘密キーのセキュリティを向上させるためです。パスフレーズは、キーの不正使用を防ぎ、サーバーへの不正アクセスを阻止します。\n\n### **WindowsでのPuTTYgenの使用**\n\nPuTTYgenをダウンロードして開きます。**Generate**（生成）ボタンをクリックし、マウスを動かしてランダム性を生成します。PuTTYgenは、公開キーと秘密キーを生成します。公開キー（後で使用するため）と秘密キー（.ppkファイルとして）を保存します。PuTTYgenは、WindowsユーザーがSSHキーを簡単に生成する方法を提供します。キーを生成したら、安全な場所に保存することを忘れないでください。\n\nPuTTYgen画面では、キーが生成された後に公開キーが表示されます。このキーをコピーして、テキストファイルに保存します。後でサーバーにアップロードするために、このキーが必要になります。秘密キーも.ppkファイルとして保存します。このファイルは、PuTTYを使用してサーバーに接続するために使用されます。\n\n## **ステップ2：公開キーをサーバーにコピーする**\n\n認証にSSHキーを使用するには、公開キーをサーバーの`~/.ssh/authorized_keys`ファイルにコピーする必要があります。これは、`ssh-copy-id`コマンドを使用するか、キーを手動でコピーすることで実行できます。\n\n### **ssh-copy-idの使用**\n\nローカルコンピューターに`ssh-copy-id`コマンドがある場合は、それを使用して公開キーをサーバーにコピーできます。基本的な構文は`ssh-copy-id ユーザー名@サーバーIP`です。サーバー上のユーザーのパスワードが要求されます。このコマンドは、公開キーをサーバーに安全にコピーする最も簡単な方法です。\n\n```bash\nssh-copy-id ユーザー名@サーバーIP\n```\n\nこのコマンドは、公開キーをサーバーの`authorized_keys`ファイルに自動的に追加します。コマンドを実行した後、SSHキーを使用してサーバーにログインしてみてください。\n\n### **公開キーを手動でコピーする**\n\n`ssh-copy-id`が利用できない場合は、公開キーファイル（`~/.ssh/id_rsa.pub`）の内容を、サーバー上の`~/.ssh/authorized_keys`ファイルに手動でコピーできます。まず、パスワードを使用してサーバーにログインします。次に、`mkdir -p ~/.ssh`を使用して、`.ssh`ディレクトリが存在しない場合は作成します。次に、`nano ~/.ssh/authorized_keys`などのテキストエディターを使用して`authorized_keys`ファイルを開くか作成し、公開キーをファイルに貼り付けます。ファイルを保存して閉じます。このプロセスにより、公開キーを手動でサーバーに追加できます。\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nテキストエディターが開いたら、公開キーの内容を貼り付けます。ファイルを保存して閉じます。これで、SSHキーを使用してサーバーにログインする準備ができました。\n\n## **ステップ3：SSHキーを使用してサーバーにログインする**\n\n公開キーが設定されたら、SSHキーを使用してサーバーにログインできます。LinuxまたはmacOSでは、これは`ssh ユーザー名@サーバーIP`コマンドを使用して行われます。パスフレーズを設定した場合は、入力を求められます。Windowsでは、PuTTYを使用し、サーバーのIPアドレスを指定し、Connection> SSH> Authで秘密キーファイル（.ppk）をロードします。この手順では、SSHキーが正しく構成されていること、およびサーバーに安全にアクセスできることを確認します。\n\nLinuxまたはmacOSでのコマンドは次のとおりです。\n\n```bash\nssh ユーザー名@サーバーIP\n```\n\nWindowsでPuTTYを使用している場合は、ログインする前に秘密キーファイル（.ppk）をロードすることを忘れないでください。\n\n## **結論：SSHキーによる高度なセキュリティ**\n\nパスワードの代わりにSSHキーを使用することで、サーバーアクセスのセキュリティが大幅に向上し、認証に公開鍵暗号が利用されます。これは、機密データにアクセスしたり、複数のサーバーを管理したりするユーザーにとって特に重要です。**SSHキー**の使用は、パスワードベースの攻撃に対する効果的な保護を提供し、サーバーのセキュリティを最大限に高めます。**SSHキー**は、最新のサーバー管理に不可欠な部分であり、すべてのシステム管理者が知っておくべきセキュリティ対策です。\n\n**今すぐSSHキーの使用を開始して、Linuxサーバーのセキュリティを強化してください！**"},{"code":"it","title":"Accesso Sicuro ai Server Linux: Autenticazione con Chiavi SSH","description":"Scopri passo dopo passo come accedere in modo sicuro ai server Linux con chiavi SSH anziché password. Creazione di chiavi SSH, copia sul server e altro ancora.","excerpt":"In questo articolo, spieghiamo passo dopo passo come connetterti in modo più sicuro ai tuoi server Linux utilizzando chiavi SSH anziché password. Scopri cosa sono le chiavi SSH, come vengono generate e come vengono installate sul server.","keywords":["Chiave SSH","Sicurezza server Linux","Autenticazione SSH","ssh-keygen","authorized_keys","PuTTYgen","accesso sicuro","gestione server"],"cities":[],"content":"## **Introduzione: Comprendere e Utilizzare le Chiavi SSH**\n\nLe chiavi SSH sono un modo molto più sicuro per accedere a un server Linux rispetto a una password. Forniscono una **sicurezza di gran lunga superiore** rispetto ai metodi di autenticazione basati su password. Le chiavi SSH utilizzano la crittografia a chiave pubblica. Ciò comporta la creazione di una coppia di chiavi: una chiave pubblica che può essere condivisa e una chiave privata che deve essere mantenuta segreta. Invece di utilizzare una password, queste chiavi verificano la tua identità, aumentando così significativamente la sicurezza del tuo server.\n\nL'accesso ai server con le **chiavi SSH** elimina il rischio che le password vengano violate o rubate. Questo metodo è particolarmente importante per gli utenti che gestiscono più server o accedono a dati sensibili. Configurando correttamente le chiavi SSH, puoi assicurarti che il tuo server sia protetto da accessi non autorizzati.\n\n## **Passaggio 1: Creare una Coppia di Chiavi**\n\nInnanzitutto, devi creare una coppia di chiavi SSH sul tuo computer locale. Questo viene fatto utilizzando uno strumento come `ssh-keygen`, disponibile su Linux, macOS e Windows. Gli utenti di Windows possono anche utilizzare strumenti come PuTTYgen o WSL.\n\n### **Utilizzo di ssh-keygen su Linux o macOS**\n\nApri un terminale ed esegui il comando `ssh-keygen`. Lo strumento ti chiederà di specificare una posizione in cui salvare la chiave. La posizione predefinita è `/home/username/.ssh/id_rsa` per la chiave privata e `/home/username/.ssh/id_rsa.pub` per la chiave pubblica. Puoi anche impostare una passphrase per la tua chiave per una maggiore sicurezza. Questo aiuta a prevenire l'uso non autorizzato della tua chiave privata.\n\n```bash\nssh-keygen\n```\n\nDopo aver eseguito il comando, il terminale mostrerà un output come questo:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/username/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/username/.ssh/id_rsa.\nYour public key has been saved in /home/username/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: caratteri_casuali username@nomecomputer\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nImpostare una passphrase è **importante** perché aumenta la sicurezza della tua chiave privata. La passphrase impedisce l'uso non autorizzato della tua chiave e blocca l'accesso non autorizzato ai tuoi server.\n\n### **Utilizzo di PuTTYgen su Windows**\n\nScarica e apri PuTTYgen. Clicca sul pulsante **Generate** (Genera) e muovi il mouse per creare casualità. PuTTYgen genererà una chiave pubblica e una chiave privata. Salva la chiave pubblica (per un uso successivo) e la chiave privata (come file .ppk). PuTTYgen offre agli utenti Windows un modo semplice per generare chiavi SSH. Dopo aver generato le chiavi, non dimenticare di conservarle in un luogo sicuro.\n\nNella schermata di PuTTYgen, vedrai la chiave pubblica dopo che è stata generata. Copia questa chiave e salvala in un file di testo. Avrai bisogno di questa chiave per caricarla successivamente sul tuo server. Salva anche la chiave privata come file .ppk. Questo file verrà utilizzato per connetterti al tuo server con PuTTY.\n\n## **Passaggio 2: Copiare la Chiave Pubblica sul Server**\n\nPer utilizzare la chiave SSH per l'autenticazione, la chiave pubblica deve essere copiata nel file `~/.ssh/authorized_keys` del server. Questo può essere fatto usando il comando `ssh-copy-id` o copiando manualmente la chiave.\n\n### **Utilizzo di ssh-copy-id**\n\nSe hai il comando `ssh-copy-id` sul tuo computer locale, puoi usarlo per copiare la chiave pubblica sul server. La sintassi di base è `ssh-copy-id utente@server_ip`. Ti chiederà la password dell'utente sul server. Questo comando è il modo più semplice per copiare in modo sicuro la chiave pubblica sul server.\n\n```bash\nssh-copy-id utente@server_ip\n```\n\nQuesto comando aggiungerà automaticamente la tua chiave pubblica al file `authorized_keys` del server. Dopo aver eseguito il comando, puoi provare ad accedere al server con la chiave SSH.\n\n### **Copia Manuale della Chiave Pubblica**\n\nSe `ssh-copy-id` non è disponibile, puoi copiare manualmente il contenuto del file della chiave pubblica (`~/.ssh/id_rsa.pub`) nel file `~/.ssh/authorized_keys` sul server. Accedi prima al server usando una password. Quindi, crea la directory `.ssh` se non esiste usando `mkdir -p ~/.ssh`. Successivamente, apri o crea il file `authorized_keys` usando un editor di testo come `nano ~/.ssh/authorized_keys` e incolla la chiave pubblica nel file. Salva e chiudi il file. Questo processo ti consente di aggiungere manualmente la tua chiave pubblica al server.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nQuando si apre l'editor di testo, incolla il contenuto della tua chiave pubblica. Salva e chiudi il file. Ora sei pronto per accedere al server con la chiave SSH.\n\n## **Passaggio 3: Accedere al Server Utilizzando la Chiave SSH**\n\nUna volta configurata la chiave pubblica, puoi accedere al server utilizzando la chiave SSH. Su Linux o macOS, questo viene fatto usando il comando `ssh utente@server_ip`. Se hai impostato una passphrase, ti verrà richiesto di inserirla. Su Windows, utilizza PuTTY, specifica l'indirizzo IP del server e carica il file della chiave privata (.ppk) in Connection > SSH > Auth. Questo passaggio verifica che le chiavi SSH siano configurate correttamente e che tu possa accedere in modo sicuro al tuo server.\n\nSu Linux o macOS, il comando è il seguente:\n\n```bash\nssh utente@server_ip\n```\n\nSe stai usando PuTTY su Windows, ricordati di caricare il file della chiave privata (.ppk) prima di accedere.\n\n## **Conclusione: Sicurezza Avanzata con le Chiavi SSH**\n\nUtilizzando le chiavi SSH anziché le password, la sicurezza dell'accesso al server viene notevolmente migliorata e la crittografia a chiave pubblica viene utilizzata per l'autenticazione. Questo è particolarmente importante per gli utenti che accedono a dati sensibili o che gestiscono più server. L'uso delle **chiavi SSH** offre una protezione efficace contro gli attacchi basati su password e massimizza la sicurezza del tuo server. Le **chiavi SSH** sono una parte indispensabile della moderna gestione dei server e una misura di sicurezza che ogni amministratore di sistema dovrebbe conoscere.\n\n**Inizia oggi stesso a utilizzare le chiavi SSH per aumentare la sicurezza dei tuoi server Linux!**"},{"code":"zh","title":"Linux 服务器安全访问：使用 SSH 密钥进行身份验证","description":"了解如何使用 SSH 密钥而不是密码安全地访问 Linux 服务器的逐步指南。包括 SSH 密钥的生成、复制到服务器等。","excerpt":"在本文中，我们将逐步解释如何使用 SSH 密钥而不是密码更安全地连接到 Linux 服务器。 了解什么是 SSH 密钥，如何生成以及如何安装在服务器上。","keywords":["SSH 密钥","Linux 服务器安全","SSH 身份验证","ssh-keygen","authorized_keys","PuTTYgen","安全访问","服务器管理"],"cities":[],"content":"## **简介：了解和使用 SSH 密钥**\n\nSSH 密钥是一种比密码更安全地登录到 Linux 服务器的方式。 与基于密码的身份验证方法相比，它们提供了**更高的安全性**。 SSH 密钥使用公钥加密。 这包括创建一对密钥：一个可以共享的公钥和一个必须保密的私钥。 这些密钥不是使用密码，而是验证您的身份，从而显着提高服务器的安全性。\n\n使用 **SSH 密钥** 访问服务器消除了密码被破解或盗用的风险。 这种方法对于管理多个服务器或访问敏感数据的用户尤其重要。 通过正确配置 SSH 密钥，您可以确保您的服务器免受未经授权的访问。\n\n## **步骤 1：创建密钥对**\n\n首先，您需要在本地计算机上创建 SSH 密钥对。 这可以使用 `ssh-keygen` 等工具来完成，该工具在 Linux、macOS 和 Windows 上可用。 Windows 用户还可以使用 PuTTYgen 或 WSL 等工具。\n\n### **在 Linux 或 macOS 中使用 ssh-keygen**\n\n打开一个终端并运行 `ssh-keygen` 命令。 该工具将提示您指定一个用于保存密钥的位置。 默认位置是私钥的 `/home/用户名/.ssh/id_rsa` 和公钥的 `/home/用户名/.ssh/id_rsa.pub`。 您还可以为您的密钥设置密码短语以提高安全性。 这有助于防止未经授权使用您的私钥。\n\n```bash\nssh-keygen\n```\n\n执行该命令后，终端将显示如下输出：\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/用户名/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/用户名/.ssh/id_rsa.\nYour public key has been saved in /home/用户名/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: 随机字符 用户名@计算机名\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\n设置密码短语**非常重要**，因为它提高了私钥的安全性。 密码短语可防止未经授权使用您的密钥并阻止对您服务器的未经授权的访问。\n\n### **在 Windows 中使用 PuTTYgen**\n\n下载并打开 PuTTYgen。 点击 **Generate** （生成）按钮并移动鼠标以创建随机性。 PuTTYgen 将生成一个公钥和一个私钥。 保存公钥（供以后使用）和私钥（作为 .ppk 文件）。 PuTTYgen 为 Windows 用户提供了一种生成 SSH 密钥的简单方法。 生成密钥后，请务必将其保存在安全的地方。\n\n在 PuTTYgen 屏幕上，您将在生成密钥后看到公钥。 复制此密钥并将其保存在文本文件中。 您将需要此密钥才能稍后将其上传到您的服务器。 另存为 .ppk 文件，也保存私钥。 此文件将用于使用 PuTTY 连接到您的服务器。\n\n## **步骤 2：将公钥复制到服务器**\n\n要使用 SSH 密钥进行身份验证，需要将公钥复制到服务器的 `~/.ssh/authorized_keys` 文件中。 这可以通过使用 `ssh-copy-id` 命令或手动复制密钥来完成。\n\n### **使用 ssh-copy-id**\n\n如果您的本地计算机上有 `ssh-copy-id` 命令，则可以使用它将公钥复制到服务器。 基本语法是 `ssh-copy-id 用户名@服务器IP`。 它将要求服务器上用户的密码。 此命令是将公钥安全复制到服务器的最简单方法。\n\n```bash\nssh-copy-id 用户名@服务器IP\n```\n\n此命令会将您的公钥自动添加到服务器的 `authorized_keys` 文件中。 执行该命令后，您可以尝试使用 SSH 密钥登录到服务器。\n\n### **手动复制公钥**\n\n如果 `ssh-copy-id` 不可用，您可以手动将公钥文件（`~/.ssh/id_rsa.pub`）的内容复制到服务器上的 `~/.ssh/authorized_keys` 文件中。 首先使用密码登录到服务器。 然后，如果目录 `.ssh` 不存在，请使用 `mkdir -p ~/.ssh` 创建它。 接下来，使用文本编辑器（如 `nano ~/.ssh/authorized_keys`）打开或创建 `authorized_keys` 文件，并将公钥粘贴到该文件中。 保存并关闭文件。 此过程允许您手动将公钥添加到服务器。\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\n打开文本编辑器后，粘贴公钥的内容。 保存并关闭该文件。 您现在可以使用 SSH 密钥登录到服务器了。\n\n## **步骤 3：使用 SSH 密钥登录到服务器**\n\n设置好公钥后，您可以使用 SSH 密钥登录到服务器。 在 Linux 或 macOS 上，这可以使用命令 `ssh 用户名@服务器IP` 来完成。 如果您设置了密码短语，系统将提示您输入。 在 Windows 上，使用 PuTTY，指定服务器的 IP 地址，并在 Connection > SSH > Auth 下加载私钥文件 (.ppk)。 此步骤验证 SSH 密钥是否配置正确，并且您可以安全地访问您的服务器。\n\n在 Linux 或 macOS 上，该命令如下：\n\n```bash\nssh 用户名@服务器IP\n```\n\n如果您在 Windows 上使用 PuTTY，请记住在登录前加载私钥文件 (.ppk)。\n\n## **结论：使用 SSH 密钥提高安全性**\n\n通过使用 SSH 密钥而不是密码，服务器访问的安全性大大提高，并且公钥加密用于身份验证。 这对于访问敏感数据或管理多个服务器的用户尤其重要。 使用 **SSH 密钥** 可有效防止基于密码的攻击，并最大限度地提高服务器的安全性。 **SSH 密钥** 是现代服务器管理中不可或缺的一部分，也是每个系统管理员都应该了解的安全措施。\n\n**立即开始使用 SSH 密钥来提高 Linux 服务器的安全性！**"},{"code":"ru","title":"Безопасный доступ к серверам Linux: Аутентификация с помощью SSH-ключей","description":"Узнайте шаг за шагом, как безопасно получать доступ к серверам Linux с помощью SSH-ключей вместо паролей. Создание SSH-ключа, копирование на сервер и многое другое.","excerpt":"В этой статье мы шаг за шагом объясним, как безопасно подключиться к вашим серверам Linux, используя SSH-ключи вместо паролей. Узнайте, что такое SSH-ключи, как они генерируются и как устанавливаются на сервере.","keywords":["SSH-ключ","Безопасность сервера Linux","SSH-аутентификация","ssh-keygen","authorized_keys","PuTTYgen","безопасный доступ","управление сервером"],"cities":[],"content":"## **Введение: Понимание и использование SSH-ключей**\n\nSSH-ключи — это гораздо более безопасный способ входа на сервер Linux, чем пароль. Они обеспечивают **гораздо более высокий уровень безопасности** по сравнению с методами аутентификации на основе пароля. SSH-ключи используют криптографию с открытым ключом. Это включает в себя создание пары ключей: открытого ключа, который можно совместно использовать, и закрытого ключа, который необходимо хранить в секрете. Вместо использования пароля эти ключи подтверждают вашу личность, что значительно повышает безопасность вашего сервера.\n\nДоступ к серверам с помощью **SSH-ключей** устраняет риск взлома или кражи паролей. Этот метод особенно важен для пользователей, которые управляют несколькими серверами или имеют доступ к конфиденциальным данным. Правильно настроив SSH-ключи, вы можете обеспечить защиту своего сервера от несанкционированного доступа.\n\n## **Шаг 1: Создайте пару ключей**\n\nПрежде всего, вам необходимо создать пару SSH-ключей на вашем локальном компьютере. Это делается с помощью такого инструмента, как `ssh-keygen`, который доступен в Linux, macOS и Windows. Пользователи Windows также могут использовать такие инструменты, как PuTTYgen или WSL.\n\n### **Использование ssh-keygen в Linux или macOS**\n\nОткройте терминал и выполните команду `ssh-keygen`. Инструмент предложит вам указать место для сохранения ключа. Местоположение по умолчанию — `/home/имя_пользователя/.ssh/id_rsa` для закрытого ключа и `/home/имя_пользователя/.ssh/id_rsa.pub` для открытого ключа. Вы также можете установить парольную фразу для своего ключа для дополнительной безопасности. Это помогает предотвратить несанкционированное использование вашего закрытого ключа.\n\n```bash\nssh-keygen\n```\n\nПосле выполнения команды терминал отобразит вывод, подобный следующему:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/имя_пользователя/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/имя_пользователя/.ssh/id_rsa.\nYour public key has been saved in /home/имя_пользователя/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: случайные_символы имя_пользователя@имя_компьютера\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nУстановка парольной фразы **важна**, поскольку это повышает безопасность вашего закрытого ключа. Парольная фраза предотвращает несанкционированное использование вашего ключа и блокирует несанкционированный доступ к вашим серверам.\n\n### **Использование PuTTYgen в Windows**\n\nЗагрузите и откройте PuTTYgen. Нажмите кнопку **Generate** (Сгенерировать) и перемещайте мышь для создания случайности. PuTTYgen сгенерирует открытый и закрытый ключ. Сохраните открытый ключ (для последующего использования) и закрытый ключ (в виде файла .ppk). PuTTYgen предоставляет пользователям Windows простой способ создания SSH-ключей. После создания ключей не забудьте сохранить их в безопасном месте.\n\nНа экране PuTTYgen вы увидите открытый ключ после его создания. Скопируйте этот ключ и сохраните его в текстовом файле. Этот ключ понадобится вам, чтобы загрузить его позже на свой сервер. Также сохраните закрытый ключ как файл .ppk. Этот файл будет использоваться для подключения к вашему серверу с помощью PuTTY.\n\n## **Шаг 2: Скопируйте открытый ключ на сервер**\n\nЧтобы использовать SSH-ключ для аутентификации, открытый ключ необходимо скопировать в файл `~/.ssh/authorized_keys` на сервере. Это можно сделать с помощью команды `ssh-copy-id` или скопировав ключ вручную.\n\n### **Использование ssh-copy-id**\n\nЕсли на вашем локальном компьютере есть команда `ssh-copy-id`, вы можете использовать ее для копирования открытого ключа на сервер. Основной синтаксис: `ssh-copy-id имя_пользователя@ip_сервера`. Он запросит пароль пользователя на сервере. Эта команда — самый простой способ безопасно скопировать открытый ключ на сервер.\n\n```bash\nssh-copy-id имя_пользователя@ip_сервера\n```\n\nЭта команда автоматически добавит ваш открытый ключ в файл `authorized_keys` на сервере. После выполнения команды вы можете попытаться войти на сервер с помощью SSH-ключа.\n\n### **Копирование открытого ключа вручную**\n\nЕсли `ssh-copy-id` недоступен, вы можете вручную скопировать содержимое файла открытого ключа (`~/.ssh/id_rsa.pub`) в файл `~/.ssh/authorized_keys` на сервере. Сначала войдите на сервер, используя пароль. Затем создайте каталог `.ssh`, если он не существует, используя `mkdir -p ~/.ssh`. Далее откройте или создайте файл `authorized_keys` с помощью текстового редактора, такого как `nano ~/.ssh/authorized_keys`, и вставьте открытый ключ в файл. Сохраните и закройте файл. Этот процесс позволяет вручную добавить ваш открытый ключ на сервер.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nКогда откроется текстовый редактор, вставьте содержимое вашего открытого ключа. Сохраните и закройте файл. Теперь вы готовы войти на сервер с помощью SSH-ключа.\n\n## **Шаг 3: Войдите на сервер, используя SSH-ключ**\n\nПосле настройки открытого ключа вы можете войти на сервер, используя SSH-ключ. В Linux или macOS это делается с помощью команды `ssh имя_пользователя@ip_сервера`. Если вы установили парольную фразу, вам будет предложено ввести ее. В Windows используйте PuTTY, укажите IP-адрес сервера и загрузите файл закрытого ключа (.ppk) в Connection > SSH > Auth. Этот шаг подтверждает, что SSH-ключи настроены правильно и вы можете безопасно получить доступ к своему серверу.\n\nВ Linux или macOS команда выглядит следующим образом:\n\n```bash\nssh имя_пользователя@ip_сервера\n```\n\nЕсли вы используете PuTTY в Windows, не забудьте загрузить файл закрытого ключа (.ppk) перед входом в систему.\n\n## **Вывод: Повышенная безопасность с помощью SSH-ключей**\n\nИспользуя SSH-ключи вместо паролей, безопасность доступа к серверу значительно повышается, и для аутентификации используется шифрование с открытым ключом. Это особенно важно для пользователей, которые имеют доступ к конфиденциальным данным или управляют несколькими серверами. Использование **SSH-ключей** обеспечивает эффективную защиту от атак на основе паролей и максимально повышает безопасность вашего сервера. **SSH-ключи** являются неотъемлемой частью современного управления серверами и мерой безопасности, о которой должен знать каждый системный администратор.\n\n**Начните использовать SSH-ключи сегодня, чтобы повысить безопасность ваших серверов Linux!**"},{"code":"uk","title":"Безпечний доступ до серверів Linux: Аутентифікація за допомогою SSH-ключів","description":"Дізнайтеся крок за кроком, як безпечно отримувати доступ до серверів Linux за допомогою SSH-ключів замість паролів. Створення SSH-ключа, копіювання на сервер та багато іншого.","excerpt":"У цій статті ми крок за кроком пояснимо, як безпечніше підключитися до ваших серверів Linux, використовуючи SSH-ключі замість паролів. Дізнайтеся, що таке SSH-ключі, як вони генеруються і як встановлюються на сервері.","keywords":["SSH-ключ","Безпека сервера Linux","SSH-аутентифікація","ssh-keygen","authorized_keys","PuTTYgen","безпечний доступ","управління сервером"],"cities":[],"content":"## **Вступ: Розуміння та використання SSH-ключів**\n\nSSH-ключі — це набагато безпечніший спосіб входу на сервер Linux, ніж пароль. Вони забезпечують **набагато вищий рівень безпеки** порівняно з методами автентифікації на основі пароля. SSH-ключі використовують криптографію з відкритим ключем. Це включає в себе створення пари ключів: відкритого ключа, який можна спільно використовувати, і закритого ключа, який необхідно зберігати в секреті. Замість використання пароля ці ключі підтверджують вашу особу, що значно підвищує безпеку вашого сервера.\n\nДоступ до серверів за допомогою **SSH-ключів** усуває ризик злому або крадіжки паролів. Цей метод особливо важливий для користувачів, які керують кількома серверами або мають доступ до конфіденційних даних. Правильно налаштувавши SSH-ключі, ви можете забезпечити захист свого сервера від несанкціонованого доступу.\n\n## **Крок 1: Створіть пару ключів**\n\nПерш за все, вам необхідно створити пару SSH-ключів на вашому локальному комп'ютері. Це робиться за допомогою такого інструменту, як `ssh-keygen`, який доступний в Linux, macOS і Windows. Користувачі Windows також можуть використовувати такі інструменти, як PuTTYgen або WSL.\n\n### **Використання ssh-keygen в Linux або macOS**\n\nВідкрийте термінал і виконайте команду `ssh-keygen`. Інструмент запропонує вам вказати місце для збереження ключа. Розташування за замовчуванням — `/home/ім'я_користувача/.ssh/id_rsa` для закритого ключа і `/home/ім'я_користувача/.ssh/id_rsa.pub` для відкритого ключа. Ви також можете встановити парольну фразу для свого ключа для додаткової безпеки. Це допомагає запобігти несанкціонованому використанню вашого закритого ключа.\n\n```bash\nssh-keygen\n```\n\nПісля виконання команди термінал відобразить вивід, подібний до наступного:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/ім'я_користувача/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/ім'я_користувача/.ssh/id_rsa.\nYour public key has been saved in /home/ім'я_користувача/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: випадкові_символи ім'я_користувача@ім'я_комп'ютера\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nВстановлення парольної фрази **важливо**, оскільки це підвищує безпеку вашого закритого ключа. Парольна фраза запобігає несанкціонованому використанню вашого ключа і блокує несанкціонований доступ до ваших серверів.\n\n### **Використання PuTTYgen в Windows**\n\nЗавантажте та відкрийте PuTTYgen. Натисніть кнопку **Generate** (Згенерувати) і переміщайте мишу для створення випадковості. PuTTYgen згенерує відкритий і закритий ключ. Збережіть відкритий ключ (для подальшого використання) і закритий ключ (у вигляді файлу .ppk). PuTTYgen надає користувачам Windows простий спосіб створення SSH-ключів. Після створення ключів не забудьте зберегти їх у безпечному місці.\n\nНа екрані PuTTYgen ви побачите відкритий ключ після його створення. Скопіюйте цей ключ і збережіть його в текстовому файлі. Цей ключ знадобиться вам, щоб завантажити його пізніше на свій сервер. Також збережіть закритий ключ як файл .ppk. Цей файл буде використовуватися для підключення до вашого сервера за допомогою PuTTY.\n\n## **Крок 2: Скопіюйте відкритий ключ на сервер**\n\nЩоб використовувати SSH-ключ для автентифікації, відкритий ключ необхідно скопіювати у файл `~/.ssh/authorized_keys` на сервері. Це можна зробити за допомогою команди `ssh-copy-id` або скопіювавши ключ вручну.\n\n### **Використання ssh-copy-id**\n\nЯкщо на вашому локальному комп'ютері є команда `ssh-copy-id`, ви можете використовувати її для копіювання відкритого ключа на сервер. Основний синтаксис: `ssh-copy-id ім'я_користувача@ip_сервера`. Він запросить пароль користувача на сервері. Ця команда — найпростіший спосіб безпечно скопіювати відкритий ключ на сервер.\n\n```bash\nssh-copy-id ім'я_користувача@ip_сервера\n```\n\nЦя команда автоматично додасть ваш відкритий ключ у файл `authorized_keys` на сервері. Після виконання команди ви можете спробувати увійти на сервер за допомогою SSH-ключа.\n\n### **Копіювання відкритого ключа вручну**\n\nЯкщо `ssh-copy-id` недоступний, ви можете вручну скопіювати вміст файлу відкритого ключа (`~/.ssh/id_rsa.pub`) у файл `~/.ssh/authorized_keys` на сервері. Спочатку увійдіть на сервер, використовуючи пароль. Потім створіть каталог `.ssh`, якщо він не існує, використовуючи `mkdir -p ~/.ssh`. Далі відкрийте або створіть файл `authorized_keys` за допомогою текстового редактора, такого як `nano ~/.ssh/authorized_keys`, і вставте відкритий ключ у файл. Збережіть і закрийте файл. Цей процес дозволяє вручну додати ваш відкритий ключ на сервер.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nКоли відкриється текстовий редактор, вставте вміст вашого відкритого ключа. Збережіть і закрийте файл. Тепер ви готові увійти на сервер за допомогою SSH-ключа.\n\n## **Крок 3: Увійдіть на сервер, використовуючи SSH-ключ**\n\nПісля налаштування відкритого ключа ви можете увійти на сервер, використовуючи SSH-ключ. У Linux або macOS це робиться за допомогою команди `ssh ім'я_користувача@ip_сервера`. Якщо ви встановили парольну фразу, вам буде запропоновано ввести її. У Windows використовуйте PuTTY, вкажіть IP-адресу сервера і завантажте файл закритого ключа (.ppk) в Connection > SSH > Auth. Цей крок підтверджує, що SSH-ключі налаштовані правильно і ви можете безпечно отримати доступ до свого сервера.\n\nВ Linux або macOS команда виглядає наступним чином:\n\n```bash\nssh ім'я_користувача@ip_сервера\n```\n\nЯкщо ви використовуєте PuTTY в Windows, не забудьте завантажити файл закритого ключа (.ppk) перед входом в систему.\n\n## **Висновок: Підвищена безпека за допомогою SSH-ключів**\n\nВикористовуючи SSH-ключі замість паролів, безпека доступу до сервера значно підвищується, і для автентифікації використовується шифрування з відкритим ключем. Це особливо важливо для користувачів, які мають доступ до конфіденційних даних або керують кількома серверами. Використання **SSH-ключів** забезпечує ефективний захист від атак на основі паролів і максимально підвищує безпеку вашого сервера. **SSH-ключі** є невід'ємною частиною сучасного управління серверами і заходом безпеки, про який повинен знати кожен системний адміністратор.\n\n**Почніть використовувати SSH-ключі сьогодні, щоб підвищити безпеку ваших серверів Linux!**"},{"code":"pl","title":"Bezpieczny dostęp do serwerów Linux: Uwierzytelnianie za pomocą kluczy SSH","description":"Dowiedz się krok po kroku, jak bezpiecznie uzyskiwać dostęp do serwerów Linux za pomocą kluczy SSH zamiast haseł. Tworzenie klucza SSH, kopiowanie na serwer i wiele więcej.","excerpt":"W tym artykule wyjaśniamy krok po kroku, jak bezpieczniej łączyć się z serwerami Linux za pomocą kluczy SSH zamiast haseł. Dowiedz się, czym są klucze SSH, jak są generowane i jak są instalowane na serwerze.","keywords":["Klucz SSH","Bezpieczeństwo serwera Linux","Uwierzytelnianie SSH","ssh-keygen","authorized_keys","PuTTYgen","bezpieczny dostęp","zarządzanie serwerem"],"cities":[],"content":"## **Wprowadzenie: Zrozumienie i używanie kluczy SSH**\n\nKlucze SSH to znacznie bezpieczniejszy sposób logowania się do serwera Linux niż hasło. Zapewniają one **znacznie wyższy poziom bezpieczeństwa** w porównaniu z metodami uwierzytelniania opartymi na hasłach. Klucze SSH wykorzystują kryptografię klucza publicznego. Obejmuje to utworzenie pary kluczy: klucza publicznego, który można udostępniać, oraz klucza prywatnego, który należy przechowywać w tajemnicy. Zamiast używać hasła, klucze te weryfikują twoją tożsamość, znacznie zwiększając bezpieczeństwo twojego serwera.\n\nDostęp do serwerów za pomocą **kluczy SSH** eliminuje ryzyko złamania lub kradzieży haseł. Metoda ta jest szczególnie ważna dla użytkowników, którzy zarządzają wieloma serwerami lub mają dostęp do poufnych danych. Poprawnie konfigurując klucze SSH, możesz zapewnić ochronę swojego serwera przed nieautoryzowanym dostępem.\n\n## **Krok 1: Utwórz parę kluczy**\n\nPrzede wszystkim musisz utworzyć parę kluczy SSH na swoim komputerze lokalnym. Można to zrobić za pomocą narzędzia takiego jak `ssh-keygen`, które jest dostępne w systemach Linux, macOS i Windows. Użytkownicy systemu Windows mogą również korzystać z narzędzi takich jak PuTTYgen lub WSL.\n\n### **Używanie ssh-keygen w systemie Linux lub macOS**\n\nOtwórz terminal i uruchom polecenie `ssh-keygen`. Narzędzie wyświetli monit o podanie lokalizacji, w której chcesz zapisać klucz. Domyślna lokalizacja to `/home/nazwa_użytkownika/.ssh/id_rsa` dla klucza prywatnego i `/home/nazwa_użytkownika/.ssh/id_rsa.pub` dla klucza publicznego. Możesz również ustawić hasło dla swojego klucza, aby zwiększyć bezpieczeństwo. Pomaga to zapobiec nieautoryzowanemu użyciu twojego klucza prywatnego.\n\n```bash\nssh-keygen\n```\n\nPo uruchomieniu polecenia terminal wyświetli dane wyjściowe podobne do następujących:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/nazwa_użytkownika/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/nazwa_użytkownika/.ssh/id_rsa.\nYour public key has been saved in /home/nazwa_użytkownika/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: losowe_znaki nazwa_użytkownika@nazwa_komputera\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nUstawienie hasła jest **ważne**, ponieważ zwiększa to bezpieczeństwo twojego klucza prywatnego. Hasło zapobiega nieautoryzowanemu użyciu twojego klucza i blokuje nieautoryzowany dostęp do twoich serwerów.\n\n### **Używanie PuTTYgen w systemie Windows**\n\nPobierz i otwórz PuTTYgen. Kliknij przycisk **Generate** (Generuj) i poruszaj myszą, aby utworzyć losowość. PuTTYgen wygeneruje klucz publiczny i klucz prywatny. Zapisz klucz publiczny (do późniejszego wykorzystania) i klucz prywatny (jako plik .ppk). PuTTYgen oferuje użytkownikom systemu Windows łatwy sposób generowania kluczy SSH. Po wygenerowaniu kluczy nie zapomnij zapisać ich w bezpiecznym miejscu.\n\nNa ekranie PuTTYgen zobaczysz klucz publiczny po jego wygenerowaniu. Skopiuj ten klucz i zapisz go w pliku tekstowym. Będziesz potrzebować tego klucza, aby przesłać go później na swój serwer. Zapisz również klucz prywatny jako plik .ppk. Ten plik będzie używany do łączenia się z serwerem za pomocą PuTTY.\n\n## **Krok 2: Skopiuj klucz publiczny na serwer**\n\nAby użyć klucza SSH do uwierzytelniania, klucz publiczny należy skopiować do pliku `~/.ssh/authorized_keys` na serwerze. Można to zrobić za pomocą polecenia `ssh-copy-id` lub kopiując klucz ręcznie.\n\n### **Używanie ssh-copy-id**\n\nJeśli masz polecenie `ssh-copy-id` na swoim komputerze lokalnym, możesz go użyć do skopiowania klucza publicznego na serwer. Podstawowa składnia to `ssh-copy-id użytkownik@adres_IP_serwera`. Zostaniesz poproszony o podanie hasła użytkownika na serwerze. To polecenie to najłatwiejszy sposób na bezpieczne skopiowanie klucza publicznego na serwer.\n\n```bash\nssh-copy-id użytkownik@adres_IP_serwera\n```\n\nTo polecenie automatycznie doda twój klucz publiczny do pliku `authorized_keys` na serwerze. Po wykonaniu polecenia możesz spróbować zalogować się na serwer za pomocą klucza SSH.\n\n### **Ręczne kopiowanie klucza publicznego**\n\nJeśli `ssh-copy-id` nie jest dostępne, możesz ręcznie skopiować zawartość pliku klucza publicznego (`~/.ssh/id_rsa.pub`) do pliku `~/.ssh/authorized_keys` na serwerze. Najpierw zaloguj się na serwer za pomocą hasła. Następnie utwórz katalog `.ssh`, jeśli nie istnieje, za pomocą polecenia `mkdir -p ~/.ssh`. Następnie otwórz lub utwórz plik `authorized_keys` za pomocą edytora tekstu, takiego jak `nano ~/.ssh/authorized_keys`, i wklej klucz publiczny do pliku. Zapisz i zamknij plik. Ten proces pozwala ręcznie dodać twój klucz publiczny na serwer.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nPo otwarciu edytora tekstu wklej zawartość swojego klucza publicznego. Zapisz i zamknij plik. Jesteś teraz gotowy do zalogowania się na serwer za pomocą klucza SSH.\n\n## **Krok 3: Zaloguj się na serwer za pomocą klucza SSH**\n\nPo skonfigurowaniu klucza publicznego możesz zalogować się na serwer za pomocą klucza SSH. W systemie Linux lub macOS robi się to za pomocą polecenia `ssh użytkownik@adres_IP_serwera`. Jeśli ustawiłeś hasło, zostaniesz poproszony o jego wprowadzenie. W systemie Windows użyj PuTTY, określ adres IP serwera i załaduj plik klucza prywatnego (.ppk) w Connection > SSH > Auth. Ten krok potwierdza, że klucze SSH są poprawnie skonfigurowane i że możesz bezpiecznie uzyskać dostęp do swojego serwera.\n\nW systemie Linux lub macOS polecenie wygląda następująco:\n\n```bash\nssh użytkownik@adres_IP_serwera\n```\n\nJeśli używasz PuTTY w systemie Windows, pamiętaj, aby załadować plik klucza prywatnego (.ppk) przed zalogowaniem się.\n\n## **Wniosek: Zwiększone bezpieczeństwo dzięki kluczom SSH**\n\nUżywając kluczy SSH zamiast haseł, bezpieczeństwo dostępu do serwera jest znacznie zwiększone, a do uwierzytelniania wykorzystywana jest kryptografia klucza publicznego. Jest to szczególnie ważne dla użytkowników, którzy mają dostęp do poufnych danych lub zarządzają wieloma serwerami. Używanie **kluczy SSH** zapewnia skuteczną ochronę przed atakami opartymi na hasłach i maksymalizuje bezpieczeństwo twojego serwera. **Klucze SSH** są nieodzowną częścią nowoczesnego zarządzania serwerami i środkiem bezpieczeństwa, o którym powinien wiedzieć każdy administrator systemu.\n\n**Zacznij używać kluczy SSH już dziś, aby zwiększyć bezpieczeństwo swoich serwerów Linux!**"},{"code":"id","title":"Akses Aman ke Server Linux: Otentikasi dengan Kunci SSH","description":"Pelajari langkah demi langkah cara mendapatkan akses aman ke server Linux dengan kunci SSH alih-alih kata sandi. Termasuk pembuatan kunci SSH, penyalinan ke server, dan banyak lagi.","excerpt":"Dalam artikel ini, kami menjelaskan langkah demi langkah cara terhubung lebih aman ke server Linux Anda menggunakan kunci SSH alih-alih kata sandi. Pelajari apa itu kunci SSH, bagaimana mereka dibuat, dan bagaimana mereka diinstal pada server.","keywords":["Kunci SSH","Keamanan server Linux","Otentikasi SSH","ssh-keygen","authorized_keys","PuTTYgen","akses aman","manajemen server"],"cities":[],"content":"## **Pendahuluan: Memahami dan Menggunakan Kunci SSH**\n\nKunci SSH adalah cara yang jauh lebih aman untuk masuk ke server Linux daripada kata sandi. Mereka memberikan **keamanan yang jauh lebih unggul** dibandingkan dengan metode otentikasi berbasis kata sandi. Kunci SSH menggunakan enkripsi kunci publik. Ini melibatkan pembuatan sepasang kunci: kunci publik yang dapat dibagikan dan kunci pribadi yang harus dirahasiakan. Alih-alih menggunakan kata sandi, kunci ini memverifikasi identitas Anda, sehingga meningkatkan keamanan server Anda secara signifikan.\n\nAkses ke server dengan **kunci SSH** menghilangkan risiko kata sandi diretas atau dicuri. Metode ini sangat penting bagi pengguna yang mengelola beberapa server atau mengakses data sensitif. Dengan mengonfigurasi kunci SSH dengan benar, Anda dapat memastikan bahwa server Anda terlindungi dari akses tidak sah.\n\n## **Langkah 1: Buat Sepasang Kunci**\n\nPertama, Anda perlu membuat sepasang kunci SSH di komputer lokal Anda. Ini dilakukan dengan menggunakan alat seperti `ssh-keygen`, yang tersedia di Linux, macOS, dan Windows. Pengguna Windows juga dapat menggunakan alat seperti PuTTYgen atau WSL.\n\n### **Menggunakan ssh-keygen di Linux atau macOS**\n\nBuka terminal dan jalankan perintah `ssh-keygen`. Alat ini akan meminta Anda untuk menentukan lokasi untuk menyimpan kunci. Lokasi defaultnya adalah `/home/nama_pengguna/.ssh/id_rsa` untuk kunci pribadi dan `/home/nama_pengguna/.ssh/id_rsa.pub` untuk kunci publik. Anda juga dapat mengatur frasa sandi untuk kunci Anda untuk keamanan tambahan. Ini membantu mencegah penggunaan kunci pribadi Anda yang tidak sah.\n\n```bash\nssh-keygen\n```\n\nSetelah menjalankan perintah, terminal akan menampilkan output seperti berikut:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/nama_pengguna/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/nama_pengguna/.ssh/id_rsa.\nYour public key has been saved in /home/nama_pengguna/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: karakter_acak nama_pengguna@nama_komputer\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nMenetapkan frasa sandi **penting** karena ini meningkatkan keamanan kunci pribadi Anda. Frasa sandi mencegah penggunaan kunci Anda yang tidak sah dan memblokir akses tidak sah ke server Anda.\n\n### **Menggunakan PuTTYgen di Windows**\n\nUnduh dan buka PuTTYgen. Klik tombol **Generate** (Buat) dan gerakkan mouse Anda untuk membuat keacakan. PuTTYgen akan membuat kunci publik dan kunci pribadi. Simpan kunci publik (untuk penggunaan nanti) dan kunci pribadi (sebagai file .ppk). PuTTYgen menawarkan pengguna Windows cara mudah untuk menghasilkan kunci SSH. Setelah menghasilkan kunci, jangan lupa untuk menyimpannya di tempat yang aman.\n\nPada layar PuTTYgen, Anda akan melihat kunci publik setelah dihasilkan. Salin kunci ini dan simpan dalam file teks. Anda akan memerlukan kunci ini untuk mengunggahnya ke server Anda nanti. Simpan juga kunci pribadi sebagai file .ppk. File ini akan digunakan untuk terhubung ke server Anda dengan PuTTY.\n\n## **Langkah 2: Salin Kunci Publik ke Server**\n\nUntuk menggunakan kunci SSH untuk otentikasi, kunci publik perlu disalin ke file `~/.ssh/authorized_keys` di server. Ini dapat dilakukan dengan menggunakan perintah `ssh-copy-id` atau dengan menyalin kunci secara manual.\n\n### **Menggunakan ssh-copy-id**\n\nJika Anda memiliki perintah `ssh-copy-id` di komputer lokal Anda, Anda dapat menggunakannya untuk menyalin kunci publik ke server. Sintaks dasarnya adalah `ssh-copy-id nama_pengguna@ip_server`. Ini akan meminta kata sandi pengguna di server. Perintah ini adalah cara termudah untuk menyalin kunci publik ke server dengan aman.\n\n```bash\nssh-copy-id nama_pengguna@ip_server\n```\n\nPerintah ini akan secara otomatis menambahkan kunci publik Anda ke file `authorized_keys` di server. Setelah menjalankan perintah, Anda dapat mencoba masuk ke server dengan kunci SSH.\n\n### **Menyalin Kunci Publik Secara Manual**\n\nJika `ssh-copy-id` tidak tersedia, Anda dapat menyalin konten file kunci publik (`~/.ssh/id_rsa.pub`) secara manual ke file `~/.ssh/authorized_keys` di server. Pertama, masuk ke server menggunakan kata sandi. Kemudian, buat direktori `.ssh` jika belum ada menggunakan `mkdir -p ~/.ssh`. Selanjutnya, buka atau buat file `authorized_keys` menggunakan editor teks seperti `nano ~/.ssh/authorized_keys` dan tempel kunci publik ke dalam file. Simpan dan tutup file. Proses ini memungkinkan Anda menambahkan kunci publik Anda ke server secara manual.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nSaat editor teks terbuka, tempel konten kunci publik Anda. Simpan dan tutup file. Anda sekarang siap untuk masuk ke server dengan kunci SSH.\n\n## **Langkah 3: Masuk ke Server Menggunakan Kunci SSH**\n\nSetelah kunci publik disiapkan, Anda dapat masuk ke server menggunakan kunci SSH. Di Linux atau macOS, ini dilakukan dengan menggunakan perintah `ssh nama_pengguna@ip_server`. Jika Anda telah menetapkan frasa sandi, Anda akan diminta untuk memasukkannya. Di Windows, gunakan PuTTY, tentukan alamat IP server dan muat file kunci pribadi (.ppk) di Connection > SSH > Auth. Langkah ini memverifikasi bahwa kunci SSH dikonfigurasi dengan benar dan Anda dapat mengakses server Anda dengan aman.\n\nDi Linux atau macOS, perintahnya adalah sebagai berikut:\n\n```bash\nssh nama_pengguna@ip_server\n```\n\nJika Anda menggunakan PuTTY di Windows, ingatlah untuk memuat file kunci pribadi (.ppk) sebelum masuk.\n\n## **Kesimpulan: Keamanan Tingkat Lanjut dengan Kunci SSH**\n\nDengan menggunakan kunci SSH alih-alih kata sandi, keamanan akses server ditingkatkan secara signifikan, dan enkripsi kunci publik digunakan untuk otentikasi. Ini sangat penting bagi pengguna yang memiliki akses ke data sensitif atau mengelola beberapa server. Penggunaan **kunci SSH** memberikan perlindungan yang efektif terhadap serangan berbasis kata sandi dan memaksimalkan keamanan server Anda. **Kunci SSH** adalah bagian tak terpisahkan dari manajemen server modern dan merupakan tindakan keamanan yang harus diketahui oleh setiap administrator sistem.\n\n**Mulailah menggunakan kunci SSH hari ini untuk meningkatkan keamanan server Linux Anda!**"},{"code":"sv","title":"Säker åtkomst till Linux-servrar: Autentisering med SSH-nycklar","description":"Lär dig steg för steg hur du säkert får åtkomst till Linux-servrar med SSH-nycklar istället för lösenord. Skapa SSH-nyckel, kopiera till server och mer.","excerpt":"I den här artikeln förklarar vi steg för steg hur du säkrare ansluter till dina Linux-servrar med SSH-nycklar istället för lösenord. Lär dig vad SSH-nycklar är, hur de genereras och hur de installeras på servern.","keywords":["SSH-nyckel","Linux serversäkerhet","SSH-autentisering","ssh-keygen","authorized_keys","PuTTYgen","säker åtkomst","serverhantering"],"cities":[],"content":"## **Introduktion: Förstå och använda SSH-nycklar**\n\nSSH-nycklar är ett mycket säkrare sätt att logga in på en Linux-server än ett lösenord. De ger en **mycket högre säkerhetsnivå** jämfört med lösenordsbaserade autentiseringsmetoder. SSH-nycklar använder kryptering med öppen nyckel. Detta innebär att man skapar ett nyckelpar: en offentlig nyckel som kan delas och en privat nyckel som måste hållas hemlig. Istället för att använda ett lösenord verifierar dessa nycklar din identitet, vilket avsevärt förbättrar säkerheten på din server.\n\nÅtkomst till servrar med **SSH-nycklar** eliminerar risken för att lösenord hackas eller stjäls. Denna metod är särskilt viktig för användare som hanterar flera servrar eller har tillgång till känslig data. Genom att konfigurera SSH-nycklar på rätt sätt kan du säkerställa att din server skyddas mot obehörig åtkomst.\n\n## **Steg 1: Skapa ett nyckelpar**\n\nFörst måste du skapa ett SSH-nyckelpar på din lokala dator. Detta görs med hjälp av ett verktyg som `ssh-keygen`, som är tillgängligt i Linux, macOS och Windows. Windows-användare kan också använda verktyg som PuTTYgen eller WSL.\n\n### **Använda ssh-keygen i Linux eller macOS**\n\nÖppna en terminal och kör kommandot `ssh-keygen`. Verktyget kommer att uppmana dig att ange en plats för att spara nyckeln. Standardplatsen är `/home/användarnamn/.ssh/id_rsa` för den privata nyckeln och `/home/användarnamn/.ssh/id_rsa.pub` för den offentliga nyckeln. Du kan också ställa in en lösenfras för din nyckel för ytterligare säkerhet. Detta hjälper till att förhindra obehörig användning av din privata nyckel.\n\n```bash\nssh-keygen\n```\n\nEfter att du har kört kommandot kommer terminalen att visa utdata som liknar följande:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/användarnamn/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/användarnamn/.ssh/id_rsa.\nYour public key has been saved in /home/användarnamn/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: slumpmässiga_tecken användarnamn@datornamn\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nAtt ange en lösenfras är **viktigt** eftersom det ökar säkerheten för din privata nyckel. Lösenfrasen förhindrar obehörig användning av din nyckel och blockerar obehörig åtkomst till dina servrar.\n\n### **Använda PuTTYgen i Windows**\n\nLadda ner och öppna PuTTYgen. Klicka på knappen **Generate** (Generera) och flytta musen för att skapa slumpmässighet. PuTTYgen kommer att generera en offentlig och en privat nyckel. Spara den offentliga nyckeln (för senare användning) och den privata nyckeln (som en .ppk-fil). PuTTYgen erbjuder Windows-användare ett enkelt sätt att generera SSH-nycklar. När du har genererat nycklarna, glöm inte att spara dem på en säker plats.\n\nPå PuTTYgen-skärmen ser du den offentliga nyckeln efter att den har genererats. Kopiera den här nyckeln och spara den i en textfil. Du behöver den här nyckeln för att ladda upp den till din server senare. Spara också den privata nyckeln som en .ppk-fil. Den här filen kommer att användas för att ansluta till din server med PuTTY.\n\n## **Steg 2: Kopiera den offentliga nyckeln till servern**\n\nFör att använda SSH-nyckeln för autentisering måste den offentliga nyckeln kopieras till filen `~/.ssh/authorized_keys` på servern. Detta kan göras genom att använda kommandot `ssh-copy-id` eller genom att kopiera nyckeln manuellt.\n\n### **Använda ssh-copy-id**\n\nOm du har kommandot `ssh-copy-id` på din lokala dator kan du använda det för att kopiera den offentliga nyckeln till servern. Grundsyntaxen är `ssh-copy-id användare@server_ip`. Den kommer att be om användarens lösenord på servern. Det här kommandot är det enklaste sättet att säkert kopiera den offentliga nyckeln till servern.\n\n```bash\nssh-copy-id användare@server_ip\n```\n\nDet här kommandot kommer automatiskt att lägga till din offentliga nyckel i filen `authorized_keys` på servern. Efter att du har kört kommandot kan du försöka logga in på servern med SSH-nyckeln.\n\n### **Kopiera den offentliga nyckeln manuellt**\n\nOm `ssh-copy-id` inte är tillgängligt kan du manuellt kopiera innehållet i den offentliga nyckelfilen (`~/.ssh/id_rsa.pub`) till filen `~/.ssh/authorized_keys` på servern. Logga först in på servern med ett lösenord. Skapa sedan katalogen `.ssh` om den inte finns med hjälp av `mkdir -p ~/.ssh`. Öppna eller skapa sedan filen `authorized_keys` med en textredigerare som `nano ~/.ssh/authorized_keys` och klistra in den offentliga nyckeln i filen. Spara och stäng filen. Den här processen låter dig manuellt lägga till din offentliga nyckel på servern.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nNär textredigeraren öppnas, klistra in innehållet i din offentliga nyckel. Spara och stäng filen. Du är nu redo att logga in på servern med SSH-nyckeln.\n\n## **Steg 3: Logga in på servern med SSH-nyckeln**\n\nNär den offentliga nyckeln är konfigurerad kan du logga in på servern med SSH-nyckeln. I Linux eller macOS görs detta med kommandot `ssh användare@server_ip`. Om du har ställt in en lösenfras kommer du att bli ombedd att ange den. I Windows använder du PuTTY, anger serverns IP-adress och laddar den privata nyckelfilen (.ppk) under Connection > SSH > Auth. Detta steg bekräftar att SSH-nycklarna är korrekt konfigurerade och att du säkert kan komma åt din server.\n\nI Linux eller macOS ser kommandot ut så här:\n\n```bash\nssh användare@server_ip\n```\n\nOm du använder PuTTY i Windows, kom ihåg att ladda den privata nyckelfilen (.ppk) innan du loggar in.\n\n## **Slutsats: Förbättrad säkerhet med SSH-nycklar**\n\nGenom att använda SSH-nycklar istället för lösenord förbättras säkerheten för serveråtkomst avsevärt, och kryptering med öppen nyckel används för autentisering. Detta är särskilt viktigt för användare som har tillgång till känslig data eller hanterar flera servrar. Användningen av **SSH-nycklar** ger ett effektivt skydd mot lösenordsbaserade attacker och maximerar säkerheten på din server. **SSH-nycklar** är en integrerad del av modern serverhantering och en säkerhetsåtgärd som varje systemadministratör bör känna till.\n\n**Börja använda SSH-nycklar idag för att förbättra säkerheten på dina Linux-servrar!**"},{"code":"ar","title":"الوصول الآمن إلى خوادم Linux: المصادقة باستخدام مفاتيح SSH","description":"تعرف خطوة بخطوة على كيفية الحصول على وصول آمن إلى خوادم Linux باستخدام مفاتيح SSH بدلاً من كلمات المرور. يشمل إنشاء مفتاح SSH ونسخه إلى الخادم والمزيد.","excerpt":"في هذه المقالة، نشرح خطوة بخطوة كيفية الاتصال بخوادم Linux الخاصة بك بشكل أكثر أمانًا باستخدام مفاتيح SSH بدلاً من كلمات المرور. تعرف على ماهية مفاتيح SSH وكيفية إنشائها وكيفية تثبيتها على الخادم.","keywords":["مفتاح SSH","أمان خادم Linux","مصادقة SSH","ssh-keygen","authorized_keys","PuTTYgen","الوصول الآمن","إدارة الخادم"],"cities":[],"content":"## **مقدمة: فهم واستخدام مفاتيح SSH**\n\nتعتبر مفاتيح SSH طريقة أكثر أمانًا لتسجيل الدخول إلى خادم Linux مقارنة بكلمة المرور. إنها توفر **مستوى أمان أعلى بكثير** مقارنة بطرق المصادقة المستندة إلى كلمة المرور. تستخدم مفاتيح SSH تشفير المفتاح العام. يتضمن ذلك إنشاء زوج من المفاتيح: مفتاح عام يمكن مشاركته ومفتاح خاص يجب الاحتفاظ به سراً. بدلاً من استخدام كلمة مرور، تتحقق هذه المفاتيح من هويتك، مما يحسن أمان الخادم الخاص بك بشكل كبير.\n\nالوصول إلى الخوادم باستخدام **مفاتيح SSH** يلغي خطر اختراق كلمات المرور أو سرقتها. هذه الطريقة مهمة بشكل خاص للمستخدمين الذين يديرون خوادم متعددة أو لديهم حق الوصول إلى البيانات الحساسة. من خلال تكوين مفاتيح SSH بشكل صحيح، يمكنك التأكد من حماية الخادم الخاص بك من الوصول غير المصرح به.\n\n## **الخطوة 1: إنشاء زوج مفاتيح**\n\nبادئ ذي بدء، تحتاج إلى إنشاء زوج مفاتيح SSH على جهاز الكمبيوتر المحلي الخاص بك. يتم ذلك باستخدام أداة مثل `ssh-keygen`، المتوفرة في Linux وmacOS وWindows. يمكن لمستخدمي Windows أيضًا استخدام أدوات مثل PuTTYgen أو WSL.\n\n### **استخدام ssh-keygen في Linux أو macOS**\n\nافتح Terminal وقم بتشغيل الأمر `ssh-keygen`. ستطالبك الأداة بتحديد موقع لحفظ المفتاح. الموقع الافتراضي هو `/home/اسم_المستخدم/.ssh/id_rsa` للمفتاح الخاص و`/home/اسم_المستخدم/.ssh/id_rsa.pub` للمفتاح العام. يمكنك أيضًا تعيين عبارة مرور للمفتاح الخاص بك لمزيد من الأمان. يساعد هذا في منع الاستخدام غير المصرح به لمفتاحك الخاص.\n\n```bash\nssh-keygen\n```\n\nبعد تشغيل الأمر، سيعرض Terminal مخرجات مشابهة لما يلي:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/اسم_المستخدم/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/اسم_المستخدم/.ssh/id_rsa.\nYour public key has been saved in /home/اسم_المستخدم/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: أحرف_عشوائية اسم_المستخدم@اسم_الكمبيوتر\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nيعد تحديد عبارة مرور **أمرًا مهمًا** لأنه يزيد من أمان مفتاحك الخاص. تمنع عبارة المرور الاستخدام غير المصرح به لمفتاحك وتحظر الوصول غير المصرح به إلى الخوادم الخاصة بك.\n\n### **استخدام PuTTYgen في Windows**\n\nقم بتنزيل PuTTYgen وافتحه. انقر فوق الزر **Generate** (إنشاء) وحرك الماوس لإنشاء عشوائية. سيقوم PuTTYgen بإنشاء مفتاح عام ومفتاح خاص. احفظ المفتاح العام (لاستخدامه لاحقًا) والمفتاح الخاص (كملف .ppk). يوفر PuTTYgen لمستخدمي Windows طريقة سهلة لإنشاء مفاتيح SSH. بعد إنشاء المفاتيح، تذكر حفظها في مكان آمن.\n\nفي شاشة PuTTYgen، سترى المفتاح العام بعد إنشائه. انسخ هذا المفتاح واحفظه في ملف نصي. ستحتاج إلى هذا المفتاح لتحميله لاحقًا على الخادم الخاص بك. احفظ أيضًا المفتاح الخاص كملف .ppk. سيتم استخدام هذا الملف للاتصال بالخادم الخاص بك باستخدام PuTTY.\n\n## **الخطوة 2: نسخ المفتاح العام إلى الخادم**\n\nلاستخدام مفتاح SSH للمصادقة، يجب نسخ المفتاح العام إلى الملف `~/.ssh/authorized_keys` على الخادم. يمكن القيام بذلك باستخدام الأمر `ssh-copy-id` أو عن طريق نسخ المفتاح يدويًا.\n\n### **استخدام ssh-copy-id**\n\nإذا كان لديك الأمر `ssh-copy-id` على جهاز الكمبيوتر المحلي الخاص بك، فيمكنك استخدامه لنسخ المفتاح العام إلى الخادم. بناء الجملة الأساسي هو `ssh-copy-id اسم_المستخدم@ip_الخادم`. سيطلب كلمة مرور المستخدم على الخادم. هذا الأمر هو أسهل طريقة لنسخ المفتاح العام إلى الخادم بأمان.\n\n```bash\nssh-copy-id اسم_المستخدم@ip_الخادم\n```\n\nسيضيف هذا الأمر تلقائيًا المفتاح العام الخاص بك إلى الملف `authorized_keys` على الخادم. بعد تشغيل الأمر، يمكنك محاولة تسجيل الدخول إلى الخادم باستخدام مفتاح SSH.\n\n### **نسخ المفتاح العام يدويًا**\n\nإذا لم يكن `ssh-copy-id` متاحًا، فيمكنك نسخ محتويات ملف المفتاح العام (`~/.ssh/id_rsa.pub`) يدويًا إلى الملف `~/.ssh/authorized_keys` على الخادم. أولاً، قم بتسجيل الدخول إلى الخادم باستخدام كلمة مرور. ثم قم بإنشاء الدليل `.ssh` إذا لم يكن موجودًا باستخدام `mkdir -p ~/.ssh`. بعد ذلك، افتح أو أنشئ الملف `authorized_keys` باستخدام محرر نصوص مثل `nano ~/.ssh/authorized_keys` والصق المفتاح العام في الملف. احفظ الملف وأغلقه. تتيح لك هذه العملية إضافة مفتاحك العام إلى الخادم يدويًا.\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nعندما يتم فتح محرر النصوص، الصق محتويات مفتاحك العام. احفظ الملف وأغلقه. أنت الآن جاهز لتسجيل الدخول إلى الخادم باستخدام مفتاح SSH.\n\n## **الخطوة 3: تسجيل الدخول إلى الخادم باستخدام مفتاح SSH**\n\nبمجرد تكوين المفتاح العام، يمكنك تسجيل الدخول إلى الخادم باستخدام مفتاح SSH. في Linux أو macOS، يتم ذلك باستخدام الأمر `ssh اسم_المستخدم@ip_الخادم`. إذا قمت بتعيين عبارة مرور، فستتم مطالبتك بإدخالها. في Windows، استخدم PuTTY، وحدد عنوان IP للخادم وقم بتحميل ملف المفتاح الخاص (.ppk) ضمن Connection > SSH > Auth. تؤكد هذه الخطوة أن مفاتيح SSH قد تم تكوينها بشكل صحيح وأنه يمكنك الوصول بأمان إلى الخادم الخاص بك.\n\nفي Linux أو macOS، يبدو الأمر كما يلي:\n\n```bash\nssh اسم_المستخدم@ip_الخادم\n```\n\nإذا كنت تستخدم PuTTY في Windows، فتذكر تحميل ملف المفتاح الخاص (.ppk) قبل تسجيل الدخول.\n\n## **الخلاصة: أمان مُحسّن باستخدام مفاتيح SSH**\n\nباستخدام مفاتيح SSH بدلاً من كلمات المرور، يتم تحسين أمان الوصول إلى الخادم بشكل كبير، ويتم استخدام تشفير المفتاح العام للمصادقة. يعد هذا أمرًا مهمًا بشكل خاص للمستخدمين الذين لديهم حق الوصول إلى البيانات الحساسة أو يديرون خوادم متعددة. يوفر استخدام **مفاتيح SSH** حماية فعالة ضد الهجمات القائمة على كلمات المرور ويزيد من أمان الخادم الخاص بك. تعتبر **مفاتيح SSH** جزءًا لا يتجزأ من إدارة الخادم الحديثة وإجراء أمني يجب أن يعرفه كل مسؤول نظام.\n\n**ابدأ في استخدام مفاتيح SSH اليوم لتحسين أمان خوادم Linux الخاصة بك!**"},{"code":"hi","title":"लिनक्स सर्वरों के लिए सुरक्षित पहुँच: SSH कुंजी के साथ पहचान","description":"सीखें कि कैसे चरण-दर-चरण लिनक्स सर्वरों तक पासवर्ड के बजाय SSH कुंजी के साथ सुरक्षित रूप से पहुँच प्राप्त करें। SSH कुंजी बनाना, सर्वर पर कॉपी करना, और भी बहुत कुछ।","excerpt":"इस लेख में, हम चरण-दर-चरण समझाते हैं कि आप पासवर्ड के बजाय SSH कुंजियों का उपयोग करके अपने लिनक्स सर्वरों से अधिक सुरक्षित रूप से कैसे जुड़ सकते हैं। जानें कि SSH कुंजियाँ क्या हैं, वे कैसे उत्पन्न होती हैं, और उन्हें सर्वर पर कैसे स्थापित किया जाता है।","keywords":["SSH कुंजी","लिनक्स सर्वर सुरक्षा","SSH पहचान","ssh-keygen","authorized_keys","PuTTYgen","सुरक्षित पहुँच","सर्वर प्रबंधन"],"cities":[],"content":"## **परिचय: SSH कुंजियों को समझना और उपयोग करना**\n\nSSH कुंजियाँ, लिनक्स सर्वर में पासवर्ड से कहीं अधिक सुरक्षित रूप से प्रवेश करने का एक तरीका हैं। वे पासवर्ड-आधारित पहचान विधियों की तुलना में **कहीं अधिक बेहतर सुरक्षा** प्रदान करती हैं। SSH कुंजियाँ सार्वजनिक कुंजी एन्क्रिप्शन का उपयोग करती हैं। इसमें एक कुंजी जोड़ी बनाना शामिल है: एक सार्वजनिक कुंजी जिसे साझा किया जा सकता है और एक निजी कुंजी जिसे गुप्त रखा जाना चाहिए। पासवर्ड का उपयोग करने के बजाय, ये कुंजियाँ आपकी पहचान को प्रमाणित करती हैं, जिससे आपके सर्वर की सुरक्षा में काफी वृद्धि होती है।\n\n**SSH कुंजियों** के साथ सर्वरों तक पहुँच पासवर्ड के हैक या चोरी होने के जोखिम को समाप्त कर देती है। यह विधि विशेष रूप से उन उपयोगकर्ताओं के लिए महत्वपूर्ण है जो एकाधिक सर्वरों का प्रबंधन करते हैं या संवेदनशील डेटा तक पहुँचते हैं। SSH कुंजियों को सही ढंग से कॉन्फ़िगर करके, आप यह सुनिश्चित कर सकते हैं कि आपका सर्वर अनधिकृत पहुँच से सुरक्षित है।\n\n## **चरण 1: एक कुंजी जोड़ी बनाएँ**\n\nसबसे पहले, आपको अपने स्थानीय कंप्यूटर पर एक SSH कुंजी जोड़ी बनाने की आवश्यकता है। यह `ssh-keygen` जैसे टूल का उपयोग करके किया जाता है, जो लिनक्स, macOS और विंडोज में उपलब्ध है। विंडोज उपयोगकर्ता PuTTYgen या WSL जैसे टूल का भी उपयोग कर सकते हैं।\n\n### **लिनक्स या macOS में ssh-keygen का उपयोग**\n\nएक टर्मिनल खोलें और `ssh-keygen` कमांड चलाएँ। टूल आपसे कुंजी को सहेजने के लिए एक स्थान निर्दिष्ट करने के लिए कहेगा। डिफ़ॉल्ट स्थान निजी कुंजी के लिए `/home/उपयोगकर्ता/.ssh/id_rsa` और सार्वजनिक कुंजी के लिए `/home/उपयोगकर्ता/.ssh/id_rsa.pub` है। आप अतिरिक्त सुरक्षा के लिए अपनी कुंजी के लिए एक पासफ़्रेज़ भी सेट कर सकते हैं। यह आपकी निजी कुंजी के अनधिकृत उपयोग को रोकने में मदद करता है।\n\n```bash\nssh-keygen\n```\n\nकमांड चलाने के बाद, टर्मिनल निम्नलिखित जैसा आउटपुट दिखाएगा:\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/उपयोगकर्ता/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/उपयोगकर्ता/.ssh/id_rsa.\nYour public key has been saved in /home/उपयोगकर्ता/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256: यादृच्छिक_वर्ण उपयोगकर्ता@कंप्यूटरनाम\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .o.       |\n|      o..        |\n|     .o.E       |\n|    . o +        |\n|   o = S         |\n|  o = +          |\n| . + o           |\n|. o.             |\n|..               |\n+----[SHA3072]-----+\n```\n\nपासफ़्रेज़ सेट करना **महत्वपूर्ण** है क्योंकि यह आपकी निजी कुंजी की सुरक्षा बढ़ाता है। पासफ़्रेज़ आपकी कुंजी के अनधिकृत उपयोग को रोकता है और आपके सर्वरों तक अनधिकृत पहुँच को रोकता है।\n\n### **विंडोज में PuTTYgen का उपयोग**\n\nPuTTYgen डाउनलोड करें और खोलें। **Generate** (उत्पन्न करें) बटन पर क्लिक करें और यादृच्छिकता उत्पन्न करने के लिए अपने माउस को घुमाएँ। PuTTYgen एक सार्वजनिक और एक निजी कुंजी उत्पन्न करेगा। सार्वजनिक कुंजी (बाद में उपयोग के लिए) और निजी कुंजी (.ppk फ़ाइल के रूप में) सहेजें। PuTTYgen विंडोज उपयोगकर्ताओं को SSH कुंजी उत्पन्न करने का एक आसान तरीका प्रदान करता है। कुंजियाँ उत्पन्न करने के बाद, उन्हें सुरक्षित स्थान पर सहेजना न भूलें।\n\nPuTTYgen स्क्रीन पर, कुंजी उत्पन्न होने के बाद आपको सार्वजनिक कुंजी दिखाई देगी। इस कुंजी को कॉपी करें और इसे एक टेक्स्ट फ़ाइल में सहेजें। आपको बाद में अपने सर्वर पर अपलोड करने के लिए इस कुंजी की आवश्यकता होगी। निजी कुंजी को भी .ppk फ़ाइल के रूप में सहेजें। इस फ़ाइल का उपयोग PuTTY के साथ आपके सर्वर से कनेक्ट करने के लिए किया जाएगा।\n\n## **चरण 2: सार्वजनिक कुंजी को सर्वर पर कॉपी करें**\n\nपहचान के लिए SSH कुंजी का उपयोग करने के लिए, सार्वजनिक कुंजी को सर्वर पर `~/.ssh/authorized_keys` फ़ाइल में कॉपी करने की आवश्यकता है। यह `ssh-copy-id` कमांड का उपयोग करके या कुंजी को मैन्युअल रूप से कॉपी करके किया जा सकता है।\n\n### **ssh-copy-id का उपयोग**\n\nयदि आपके स्थानीय कंप्यूटर पर `ssh-copy-id` कमांड है, तो आप सार्वजनिक कुंजी को सर्वर पर कॉपी करने के लिए इसका उपयोग कर सकते हैं। मूल सिंटैक्स `ssh-copy-id उपयोगकर्ता@सर्वर_आईपी` है। यह सर्वर पर उपयोगकर्ता के पासवर्ड के लिए पूछेगा। यह कमांड सार्वजनिक कुंजी को सुरक्षित रूप से सर्वर पर कॉपी करने का सबसे आसान तरीका है।\n\n```bash\nssh-copy-id उपयोगकर्ता@सर्वर_आईपी\n```\n\nयह कमांड स्वचालित रूप से आपकी सार्वजनिक कुंजी को सर्वर पर `authorized_keys` फ़ाइल में जोड़ देगा। कमांड चलाने के बाद, आप SSH कुंजी के साथ सर्वर में लॉग इन करने का प्रयास कर सकते हैं।\n\n### **सार्वजनिक कुंजी को मैन्युअल रूप से कॉपी करना**\n\nयदि `ssh-copy-id` उपलब्ध नहीं है, तो आप सर्वर पर `~/.ssh/authorized_keys` फ़ाइल में सार्वजनिक कुंजी फ़ाइल (`~/.ssh/id_rsa.pub`) की सामग्री को मैन्युअल रूप से कॉपी कर सकते हैं। सबसे पहले, पासवर्ड का उपयोग करके सर्वर में लॉग इन करें। फिर, यदि यह मौजूद नहीं है तो `mkdir -p ~/.ssh` का उपयोग करके `.ssh` निर्देशिका बनाएँ। इसके बाद, `nano ~/.ssh/authorized_keys` जैसे टेक्स्ट एडिटर का उपयोग करके फ़ाइल `authorized_keys` खोलें या बनाएँ और फ़ाइल में सार्वजनिक कुंजी चिपकाएँ। फ़ाइल को सहेजें और बंद करें। यह प्रक्रिया आपको मैन्युअल रूप से सर्वर पर अपनी सार्वजनिक कुंजी जोड़ने की अनुमति देती है।\n\n```bash\nmkdir -p ~/.ssh\nnano ~/.ssh/authorized_keys\n```\n\nजब टेक्स्ट एडिटर खुलता है, तो अपनी सार्वजनिक कुंजी की सामग्री पेस्ट करें। फ़ाइल को सहेजें और बंद करें। अब आप SSH कुंजी के साथ सर्वर में लॉग इन करने के लिए तैयार हैं।\n\n## **चरण 3: SSH कुंजी का उपयोग करके सर्वर में लॉग इन करें**\n\nएक बार सार्वजनिक कुंजी कॉन्फ़िगर हो जाने के बाद, आप SSH कुंजी का उपयोग करके सर्वर में लॉग इन कर सकते हैं। लिनक्स या macOS में, यह कमांड `ssh उपयोगकर्ता@सर्वर_आईपी` का उपयोग करके किया जाता है। यदि आपने पासफ़्रेज़ सेट किया है, तो आपको इसे दर्ज करने के लिए कहा जाएगा। विंडोज में, PuTTY का उपयोग करें, सर्वर IP पता निर्दिष्ट करें और कनेक्शन > SSH > Auth के अंतर्गत निजी कुंजी फ़ाइल (.ppk) लोड करें। यह चरण पुष्टि करता है कि SSH कुंजियाँ सही ढंग से कॉन्फ़िगर की गई हैं और आप सुरक्षित रूप से अपने सर्वर तक पहुँच सकते हैं।\n\nलिनक्स या macOS में कमांड इस प्रकार है:\n\n```bash\nssh उपयोगकर्ता@सर्वर_आईपी\n```\n\nयदि आप विंडोज में PuTTY का उपयोग कर रहे हैं, तो लॉग इन करने से पहले निजी कुंजी फ़ाइल (.ppk) लोड करना याद रखें।\n\n## **निष्कर्ष: SSH कुंजियों के साथ उन्नत सुरक्षा**\n\nपासवर्ड के बजाय SSH कुंजियों का उपयोग करके, सर्वर एक्सेस की सुरक्षा में काफी सुधार होता है, और पहचान के लिए सार्वजनिक कुंजी एन्क्रिप्शन का उपयोग किया जाता है। यह विशेष रूप से उन उपयोगकर्ताओं के लिए महत्वपूर्ण है जिनके पास संवेदनशील डेटा तक पहुंच है या जो एकाधिक सर्वरों का प्रबंधन करते हैं। **SSH कुंजियों** का उपयोग पासवर्ड-आधारित हमलों के खिलाफ प्रभावी सुरक्षा प्रदान करता है और आपके सर्वर की सुरक्षा को अधिकतम करता है। **SSH कुंजियाँ** आधुनिक सर्वर प्रबंधन का एक अभिन्न अंग हैं और एक सुरक्षा उपाय है जिसे प्रत्येक सिस्टम प्रशासक को पता होना चाहिए।\n\n**अपने लिनक्स सर्वरों की सुरक्षा बढ़ाने के लिए आज ही SSH कुंजियों का उपयोग करना शुरू करें!**"}]}